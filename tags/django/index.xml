<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Django | RUNHAN YU</title>
    <link>/tags/django/</link>
      <atom:link href="/tags/django/index.xml" rel="self" type="application/rss+xml" />
    <description>Django</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Fri, 11 Oct 2019 13:58:00 -0700</lastBuildDate>
    <image>
      <url>/img/icon-192.png</url>
      <title>Django</title>
      <link>/tags/django/</link>
    </image>
    
    <item>
      <title>My first Django app</title>
      <link>/post/444.html/</link>
      <pubDate>Fri, 11 Oct 2019 13:58:00 -0700</pubDate>
      <guid>/post/444.html/</guid>
      <description>

&lt;p&gt;This is my implementaion on the &lt;a href=&#34;https://docs.djangoproject.com/en/1.11/intro/tutorial01/&#34; target=&#34;_blank&#34;&gt;Django tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;create-django-project-and-a-polls-app&#34;&gt;Create Django project and a &lt;code&gt;polls&lt;/code&gt; app&lt;/h2&gt;

&lt;p&gt;First, I verify my Django installation and version by:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;python -m django --version
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If Python (use 3 here) or Django (1.11.23 here) is not installed, go by:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install python
mkdir ~/.venvs/venv
python3 -m venv ~/.venvs/venv
source ~/.venvs/venv/bin/activate
pip install django==1.11.23
pip install psycopg2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now I could create a project with a collection of settings for an instance of Django. Avoid naming projects after built-in Python (&lt;code&gt;test&lt;/code&gt;) or Django (&lt;code&gt;django&lt;/code&gt;) components. And for security, put codes in some directory outside of the document root, such as &lt;code&gt;/home/mycode&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;django-admin startproject mysite
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And this creates:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;mysite
├── manage.py # a command-line utility
└── mysite # actual Python package for mysite project
    ├── __init__.py
    ├── settings.py # settings/configuration
    ├── urls.py # URL declaration; a &#39;table of contents&#39; of the Django-powered site
    └── wsgi.py # entry-point for WSGI-compatible web servers to serve the project
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I could run and verify the function of the development server (default port is 8000)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;python manage.py runserver 8001
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The development server automatically reloads Python code for each request as needed.&lt;/p&gt;

&lt;p&gt;Now I have a project (a collection of configuration), I want to create some apps for the website right next to my &lt;code&gt;manage.py&lt;/code&gt; as a top-level module. So I create the Polls app by:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;python manage.py startapp polls
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And this creates:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;polls
├── __init__.py
├── admin.py
├── apps.py
├── migrations
│   └── __init__.py
├── models.py
├── tests.py
└── views.py
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;write-my-first-view-for-the-polls-app&#34;&gt;Write my first &lt;code&gt;view&lt;/code&gt; for the &lt;code&gt;polls&lt;/code&gt; app&lt;/h2&gt;

&lt;p&gt;Edit &lt;code&gt;polls/views.py&lt;/code&gt; as:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from django.shortcuts import render
from django.http import HttpResponse

def index(request):
    return HttpResponse(&amp;quot;Hello, world. You&#39;re at the polls index.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Map the view it to a URL by URLconf &lt;code&gt;polls/urls.py&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;code-snippet--polls-urls.py&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from django.conf.urls import url

from . import views

urlpatterns = [
    url(r&#39;^$&#39;, views.index, name=&#39;index&#39;),
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And point the root URLconf at the &lt;code&gt;polls.urls&lt;/code&gt; module by editing &lt;code&gt;mysite/urls.py&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;code-snippet--mysite-urls.py&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from django.conf.urls import url, include
from django.contrib import admin

urlpatterns = [
    url(r&#39;^polls/&#39;, include(&#39;polls.urls&#39;)),
    url(r&#39;^admin/&#39;, admin.site.urls),
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;include()&lt;/code&gt; function allows referencing other URLconfs. You should always use &lt;code&gt;include()&lt;/code&gt; when you include other URL patterns. &lt;code&gt;admin.site.urls&lt;/code&gt; is the only exception to this.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;url(regex, view, [kwargs, name])&lt;/code&gt; function is passed four arguments.
Note that the &lt;code&gt;regex&lt;/code&gt; does not search GET and POST parameters, or the domain name.&lt;/p&gt;

&lt;h2 id=&#34;setup-database-for-django-apps&#34;&gt;Setup database for Django apps&lt;/h2&gt;

&lt;p&gt;Prepare PostgreSQL database:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install postgresql@10
brew link postgresql@10 --force
brew services start postgresql@10
createuser --superuser djangouser
createdb -O djangouser djangodb
psql djangodb; ALTER USER djangouser PASSWORD &#39;mypassword&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Setup database in &lt;code&gt;mysite/settings.py&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;code-snippet--mysite-settings.py&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;DATABASES = {
    &#39;default&#39;: {
        &#39;ENGINE&#39;: &#39;django.db.backends.postgresql&#39;,
        &#39;NAME&#39;: &#39;djangodb&#39;,
        &#39;USER&#39;: &#39;djangouser&#39;,
        &#39;PASSWORD&#39;: &#39;mypassword&#39;,
        &#39;HOST&#39;: &#39;127.0.0.1&#39;,
        &#39;PORT&#39;: &#39;5432&#39;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then run &lt;code&gt;migrate&lt;/code&gt; command to create the tables for &lt;code&gt;INSTALLED_APPS&lt;/code&gt; in the database, currently for &lt;code&gt;admin&lt;/code&gt;, &lt;code&gt;auth&lt;/code&gt;, &lt;code&gt;contenttypes&lt;/code&gt; and &lt;code&gt;sessions&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;python manage.py migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;create-models-for-the-polls-app&#34;&gt;Create Models for the &lt;code&gt;polls&lt;/code&gt; app&lt;/h2&gt;

&lt;h3 id=&#34;change-models-in-models-dot-py&#34;&gt;Change models in &lt;code&gt;models.py&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Now I will define my models, essentially my database layout with additional metadata. Note Django follows the DRY (Don&amp;rsquo;t Repeat Yourself, every piece of knowledge must have a single, unambiguous, authoritative representation within a system) principle.&lt;/p&gt;

&lt;p&gt;I create two models &lt;code&gt;Questions&lt;/code&gt; and &lt;code&gt;Choice&lt;/code&gt; in my simple poll app:&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;code-snippet--polls-models.py&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from django.db import models
from django.utils.encoding import python_2_unicode_compatible

@python_2_unicode_compatible # support Python 2
class Question(models.Model):
    question_text = models.CharField(max_length=200) # field
    pub_date = models.DateTimeField(&#39;date published&#39;)

    # it is important to add object representation
    # especially for Django&#39;s automatically-generated admin
    def __str__(self):
        return self.question_text

    # custom method for demonstration
    def was_published_recently(self):
        now = timezone.now()
        return now - datetime.timedelta(days=1) &amp;lt;= self.pub_date &amp;lt;= now

    # custom the question change list in admin view
    was_published_recently.admin_order_field = &#39;pub_date&#39;
    was_published_recently.boolean = True # use icon to represent true or false
    was_published_recently.short_description = &#39;Published recently?&#39;

class Choice(models.Model):
    question = models.ForeignKey(Question, on_delete=models.CASCADE) # relationship
    choice_text = models.CharField(max_length=200)
    votes = models.IntegerField(default=0)
    def __str__(self):
        return self.choice_text
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then I could add a reference of &lt;code&gt;polls&lt;/code&gt; app to its configuration class in the &lt;code&gt;INSTALLED_APPS&lt;/code&gt; setting.&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;code-snippet--mysite-settings.py&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;INSTALLED_APPS = [
    &#39;polls.apps.PollsConfig&#39;,
    &#39;django.contrib.admin&#39;,
    &#39;django.contrib.auth&#39;,
    &#39;django.contrib.contenttypes&#39;,
    &#39;django.contrib.sessions&#39;,
    &#39;django.contrib.messages&#39;,
    &#39;django.contrib.staticfiles&#39;,
]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;run-python-manage-dot-py-makemigrations-to-create-migrations-for-those-changes&#34;&gt;Run &lt;code&gt;python manage.py makemigrations&lt;/code&gt; to create migrations for those changes&lt;/h3&gt;

&lt;p&gt;Now run the command to tell Django that I would like store the changes for &lt;code&gt;polls&lt;/code&gt; as a &lt;em&gt;migration&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;python manage.py makemigrations polls
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I could also see the SQL that migration would run by:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;python manage.py sqlmigrate polls 0001
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;BEGIN;
--
-- Create model Choice
--
CREATE TABLE &amp;quot;polls_choice&amp;quot; (&amp;quot;id&amp;quot; serial NOT NULL PRIMARY KEY, &amp;quot;choice_text&amp;quot; varchar(200
) NOT NULL, &amp;quot;votes&amp;quot; integer NOT NULL);
--
-- Create model Question
--
CREATE TABLE &amp;quot;polls_question&amp;quot; (&amp;quot;id&amp;quot; serial NOT NULL PRIMARY KEY, &amp;quot;question_text&amp;quot; varchar
(200) NOT NULL, &amp;quot;pub_date&amp;quot; timestamp with time zone NOT NULL);
--
-- Add field question to choice
--
ALTER TABLE &amp;quot;polls_choice&amp;quot; ADD COLUMN &amp;quot;question_id&amp;quot; integer NOT NULL;
CREATE INDEX &amp;quot;polls_choice_question_id_c5b4b260&amp;quot; ON &amp;quot;polls_choice&amp;quot; (&amp;quot;question_id&amp;quot;);
ALTER TABLE &amp;quot;polls_choice&amp;quot; ADD CONSTRAINT &amp;quot;polls_choice_question_id_c5b4b260_fk_polls_qu
estion_id&amp;quot; FOREIGN KEY (&amp;quot;question_id&amp;quot;) REFERENCES &amp;quot;polls_question&amp;quot; (&amp;quot;id&amp;quot;) DEFERRABLE INI
TIALLY DEFERRED;
COMMIT;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;run-python-manage-dot-py-migrate-to-apply-those-changes-to-the-database&#34;&gt;Run &lt;code&gt;python manage.py migrate&lt;/code&gt; to apply those changes to the database&lt;/h3&gt;

&lt;p&gt;Then I create those model tables in my database by running &lt;code&gt;migrate&lt;/code&gt; again:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;python manage.py migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;use-django-apis-to-interact-with-the-polls-app&#34;&gt;Use Django APIs to interact with the &lt;code&gt;polls&lt;/code&gt; app&lt;/h2&gt;

&lt;p&gt;Now I could play with the Django API using the Python shell under &lt;code&gt;DJANGO_SETTINGS_MODULE environment variable&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ python manage.py shell
&amp;gt;&amp;gt;&amp;gt; from polls.models import Question, Choice
&amp;gt;&amp;gt;&amp;gt; Question.objects.all()
&amp;gt;&amp;gt;&amp;gt; from django.utils import timezone
&amp;gt;&amp;gt;&amp;gt; q = Question(question_text=&amp;quot;What&#39;s new?&amp;quot;, pub_date=timezone.now())
&amp;gt;&amp;gt;&amp;gt; q.save()
&amp;gt;&amp;gt;&amp;gt; q.id
&amp;gt;&amp;gt;&amp;gt; q.question_text
&amp;gt;&amp;gt;&amp;gt; q.pub_date
&amp;gt;&amp;gt;&amp;gt; Question.objects.get(pub_date__year=timezone.now().year)
&amp;gt;&amp;gt;&amp;gt; Question.objects.get(id=1) # identical to Question.objects.get(pk=1)
&amp;gt;&amp;gt;&amp;gt; q.was_published_recently()
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;use-django-admin-to-manage-the-question-object&#34;&gt;Use Django Admin to manage the &lt;code&gt;Question&lt;/code&gt; object&lt;/h2&gt;

&lt;p&gt;Django was written in a newsroom environment. The admin is intended to be used for site managers to edit content.&lt;/p&gt;

&lt;p&gt;An admin could be created by:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;python manage.py createsuperuser
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then I could login through &lt;a href=&#34;http://127.0.0.1:8001/admin/&#34; target=&#34;_blank&#34;&gt;http://127.0.0.1:8001/admin/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Don&amp;rsquo;t forget to register the Question object with an admin interface by:&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;code-snippet--polls-admin.py&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from django.contrib import admin
from .models import Question

admin.site.register(Question)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;four-public-interface-views-for-the-polls-app&#34;&gt;Four public interface &lt;code&gt;views&lt;/code&gt; for the &lt;code&gt;polls&lt;/code&gt; app&lt;/h2&gt;

&lt;p&gt;I will create four views for the &lt;code&gt;polls&lt;/code&gt; app:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Question &amp;ldquo;index&amp;rdquo; page: displays the latest few questions.&lt;/li&gt;
&lt;li&gt;Question &amp;ldquo;detail&amp;rdquo; page: displays a question text, with no results but with a form to vote.&lt;/li&gt;
&lt;li&gt;Question &amp;ldquo;results&amp;rdquo; page: displays results for a particular question.&lt;/li&gt;
&lt;li&gt;Vote action: handles voting for a particular choice in a particular question.&lt;/li&gt;
&lt;/ul&gt;

&lt;!--listend--&gt;

&lt;p&gt;&lt;a id=&#34;code-snippet--polls-views.py&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from django.shortcuts import render
from django.http import HttpResponse

def index(request):
    return HttpResponse(&amp;quot;Hello, world. You&#39;re at the polls index.&amp;quot;)

def detail(request, question_id):
    return HttpResponse(&amp;quot;You&#39;re looking at question %s.&amp;quot; % question_id)

def results(request, question_id):
    return HttpResponse(response % question_id)

def vote(request, question_id):
    return HttpResponse(&amp;quot;You&#39;re voting on question %s.&amp;quot; % question_id)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a id=&#34;code-snippet--polls-urls.py&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from django.conf.urls import url

from . import views

app_name = &#39;polls&#39;
urlpatterns = [
    # e.g. /polls/
    url(r&#39;^$&#39;, views.index, name=&#39;index&#39;),
    # e.g. /polls/5/
    url(r&#39;^(?P&amp;lt;question_id&amp;gt;[0-9]+)/$&#39;, views.detail, name=&#39;detail&#39;),
    # e.g. /polls/5/results/
    url(r&#39;^(?P&amp;lt;question_id&amp;gt;[0-9]+)/results/$&#39;, views.results, name=&#39;results&#39;),
    # e.g. /polls/5/vote/
    url(r&#39;^(?P&amp;lt;question_id&amp;gt;[0-9]+)/vote/$&#39;, views.vote, name=&#39;vote&#39;),
]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;index-view&#34;&gt;Index view&lt;/h3&gt;

&lt;p&gt;I could use &lt;code&gt;templates&lt;/code&gt; directory to seperate design from Python:&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;code-snippet--polls-templates-polls-index.html&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;{% if latest_question_list %}
    &amp;lt;ul&amp;gt;
    {% for question in latest_question_list %}
        &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;{% url &#39;polls:detail&#39; question.id %}&amp;quot;&amp;gt;{{ question.question_text }}&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
    {% endfor %}
    &amp;lt;/ul&amp;gt;
{% else %}
    &amp;lt;p&amp;gt;No polls are available.&amp;lt;/p&amp;gt;
{% endif %}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here I use &lt;code&gt;&amp;lt;a href=&amp;quot;{% url &#39;polls:detail&#39; question.id %}&amp;quot;&amp;gt;&lt;/code&gt; to avoid hardcoded link like &lt;code&gt;&amp;lt;a href=&amp;quot;/polls/{{ question.id }}/&amp;quot;&amp;gt;&lt;/code&gt;, so that it look up the URL definition as specified in the &lt;code&gt;polls.url&lt;/code&gt; module. I use &lt;code&gt;polls:detail&lt;/code&gt; here to point at the namespaced detail view, as &lt;code&gt;&#39;polls&#39;&lt;/code&gt; is specified as &lt;code&gt;app_name&lt;/code&gt; in &lt;code&gt;polls/urls.py&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;code-snippet--polls-views.py&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# ...
from django.utils import timezone
from .models import Question

def index(request):
    latest_question_list = Question.objects.filter(
        pub_date__lte=timezone.now()
    ).order_by(&#39;-pub_date&#39;)[:5]
    context = {&#39;latest_question_list&#39;: latest_question_list}
    return render(request, &#39;polls/index.html&#39;, context)
# ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here I use &lt;code&gt;render()&lt;/code&gt; shortcut for &lt;code&gt;HttpResponse(loader.get_template(file).render(context, request))&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;detail-view-or-raise-a-404-error&#34;&gt;Detail view or raise a 404 error&lt;/h3&gt;

&lt;p&gt;Each view is responsible for doing one of two things: returning an &lt;code&gt;HttpResponse&lt;/code&gt; object containing the content for the requested page, or raising an exception such as &lt;code&gt;Http404&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;code-snippet--polls-templates-polls-detail.html&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;h1&amp;gt;{{ question.question_text }}&amp;lt;/h1&amp;gt;
&amp;lt;ul&amp;gt;
{% for choice in question.choice_set.all %}
    &amp;lt;li&amp;gt;{{ choice.choice_text }}&amp;lt;/li&amp;gt;
{% endfor %}
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a id=&#34;code-snippet--polls-views.py&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from django.shortcuts import get_object_or_404, render
from .models import Question
# ...
def detail(request, question_id):
    question = get_object_or_404(
        Question.objects.filter(pub_date__lte=timezone.now()), pk=question_id
    )
    return render(request, &#39;polls/detail.html&#39;, {&#39;question&#39;: question})
# ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here I use &lt;code&gt;get_object_or_404()&lt;/code&gt; shortcut for &lt;code&gt;Http404&lt;/code&gt; exception.&lt;/p&gt;

&lt;h3 id=&#34;vote-view-creating-a-simple-form&#34;&gt;Vote view: creating a simple form&lt;/h3&gt;

&lt;p&gt;Now I update my poll detail template and add a simple form to it.&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;code-snippet--polls-templates-polls-detail.html&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;h1&amp;gt;{{ question.question_text }}&amp;lt;/h1&amp;gt;

{% if error_message %}&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;{{ error_message }}&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;{% endif %}

&amp;lt;!--POST, act of submitting form will alter data server-side--&amp;gt;
&amp;lt;form action=&amp;quot;{% url &#39;polls:vote&#39; question.id %}&amp;quot; method=&amp;quot;post&amp;quot;&amp;gt;
  &amp;lt;!--this protect from Cross Site Request Forgeries--&amp;gt;
  {% csrf_token %}
  {% for choice in question.choice_set.all %}
  &amp;lt;!--display a radio button which POST data choice=choice.id--&amp;gt;
  &amp;lt;input type=&amp;quot;radio&amp;quot; name=&amp;quot;choice&amp;quot; id=&amp;quot;choice{{ forloop.counter }}&amp;quot; value=&amp;quot;{{ choice.id }}&amp;quot; /&amp;gt;
  &amp;lt;label for=&amp;quot;choice{{ forloop.counter }}&amp;quot;&amp;gt;{{ choice.choice_text }}&amp;lt;/label&amp;gt;&amp;lt;br /&amp;gt;
  {% endfor %}
  &amp;lt;input type=&amp;quot;submit&amp;quot; value=&amp;quot;Vote&amp;quot; /&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note all POST forms that are targeted at internal URLs should use the &lt;code&gt;{% csrf_token %}&lt;/code&gt; template tag to protect from Cross Site Request Forgeries.&lt;/p&gt;

&lt;p&gt;And I also replace the dummy implementation of the &lt;code&gt;vote()&lt;/code&gt; function with a real one.&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;code-snippet--polls-views.py&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from django.shortcuts import get_object_or_404, render
from django.http import HttpResponseRedirect, HttpResponse
from django.urls import reverse

from .models import Choice, Question
# ...
def vote(request, question_id):
    question = get_object_or_404(Question, pk=question_id)
    try:
        selected_choice = question.choice_set.get(pk=request.POST[&#39;choice&#39;])
    except (KeyError, Choice.DoesNotExist):
        # Redisplay the question voting form.
        return render(request, &#39;polls/detail.html&#39;, {
            &#39;question&#39;: question,
            &#39;error_message&#39;: &amp;quot;You didn&#39;t select a choice.&amp;quot;,
        })
    else:
        selected_choice.votes += 1
        selected_choice.save()
        # Always return an HttpResponseRedirect after successfully dealing
        # with POST data. This prevents data from being posted twice if a
        # user hits the Back button.
        return HttpResponseRedirect(reverse(&#39;polls:results&#39;, args=(question.id,)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that always return an HttpResponseRedirect after successfully dealing with POST data to prevent from posting data twice if a user hits the Back button. And I use the &lt;code&gt;reverse()&lt;/code&gt; function in the &lt;code&gt;HttpResponseRedirect&lt;/code&gt; constructor to help avoid hardcoding a URL in the view function.&lt;/p&gt;

&lt;p&gt;And note that this &lt;code&gt;vote()&lt;/code&gt; have a &lt;em&gt;race condition&lt;/em&gt; problem: if two users of my website try to vote at &lt;em&gt;exactly the same time&lt;/em&gt;, the computed new value of &lt;code&gt;votes&lt;/code&gt; might go wrong.&lt;/p&gt;

&lt;h3 id=&#34;result-view&#34;&gt;Result view&lt;/h3&gt;

&lt;p&gt;Now I implement the &lt;code&gt;result()&lt;/code&gt; view by creating a result template and update the view.&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;code-snippet--polls-templates-polls-results.html&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;h1&amp;gt;{{ question.question_text }}&amp;lt;/h1&amp;gt;

&amp;lt;ul&amp;gt;
  {% for choice in question.choice_set.all %}
  &amp;lt;li&amp;gt;{{ choice.choice_text }} -- {{ choice.votes }} vote{{ choice.votes|pluralize }}&amp;lt;/li&amp;gt;
  {% endfor %}
&amp;lt;/ul&amp;gt;

&amp;lt;a href=&amp;quot;{% url &#39;polls:detail&#39; question.id %}&amp;quot;&amp;gt;Vote again?&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a id=&#34;code-snippet--polls-view.py&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# ...
def results(request, question_id):
    question = get_object_or_404(
        Question.objects.filter(pub_date__lte=timezone.now), pk=question_id
    )
    return render(request, &#39;polls/results.html&#39;, {&#39;question&#39;: question})
# ...
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;use-django-s-generic-views-instead-for-some-simple-views-in-the-polls-app&#34;&gt;Use Django&amp;rsquo;s generic views instead for some simple views in the &lt;code&gt;polls&lt;/code&gt; app&lt;/h2&gt;

&lt;p&gt;Since it is pretty common for basic Web development to get data from the database according a passing parameter in the URL, loading a template and returning template, Django provides generic views for the simple  &lt;code&gt;detail()&lt;/code&gt;, &lt;code&gt;results()&lt;/code&gt; and &lt;code&gt;index()&lt;/code&gt; views.&lt;/p&gt;

&lt;p&gt;In practice, when writing a Django app, people evaluate whether generic views are a good fit for their problem, and use them from the beginning.&lt;/p&gt;

&lt;p&gt;I amend the &lt;code&gt;polls/urls.py&lt;/code&gt; URLconf:&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;code-snippet--polls-urls.py&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from django.conf.urls import url

from . import views

app_name = &#39;polls&#39;
urlpatterns = [
    # e.g. /polls/
    url(r&#39;^$&#39;, views.IndexView.as_view(), name=&#39;index&#39;),
    # e.g. /polls/5/
    url(r&#39;^(?P&amp;lt;pk&amp;gt;[0-9]+)/$&#39;, views.DetailView.as_view(), name=&#39;detail&#39;),
    # e.g. /polls/5/results/
    url(r&#39;^(?P&amp;lt;pk&amp;gt;[0-9]+)/results/$&#39;, views.ResultsView.as_view(), name=&#39;results&#39;),
    # e.g. /polls/5/vote/
    url(r&#39;^(?P&amp;lt;question_id&amp;gt;[0-9]+)/vote/$&#39;, views.vote, name=&#39;vote&#39;),
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note &lt;code&gt;&amp;lt;question_id&amp;gt;&lt;/code&gt; in second and third patterns changes to &lt;code&gt;&amp;lt;pk&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I also amend &lt;code&gt;index()&lt;/code&gt;, &lt;code&gt;detail()&lt;/code&gt; and &lt;code&gt;results()&lt;/code&gt; views with Django&amp;rsquo;s generic views:&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;code-snippet--polls-view.py&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from django.shortcuts import get_object_or_404, render
from django.http import HttpResponseRedirect
from django.urls import reverse
from django.views import generic
from django.utils import timezone

from .models import Choice, Question


class IndexView(generic.ListView):
    template_name = &#39;polls/index.html&#39;
    context_object_name = &#39;latest_question_list&#39;

    def get_queryset(self):
        return Question.objects.filter(
            pub_date__lte=timezone.now()
        ).order_by(&#39;-pub_date&#39;)[:5]


class DetailView(generic.DetailView):
    model = Question
    template_name = &#39;polls/detail.html&#39;

    def get_queryset(self):
        return Question.objects.filter(pub_date__lte=timezone.now())


class ResultsView(generic.DetailView):
    model = Question
    template_name = &#39;polls/results.html&#39;

    def get_queryset(self):
        return Question.objects.filter(pub_date__lte=timezone.now())

# ...
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;automated-testing&#34;&gt;Automated testing&lt;/h2&gt;

&lt;p&gt;I will create some automated tests so that as I make changes to my app, I could check that my code still works well. Besides,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tests will save time&lt;/li&gt;
&lt;li&gt;Tests don&amp;rsquo;t just identify problems, they prevent them&lt;/li&gt;
&lt;li&gt;Tests make my code more attractive&lt;/li&gt;
&lt;li&gt;Tests help teams work together&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Rules of thumb:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a separate TestClass for each model or view&lt;/li&gt;
&lt;li&gt;a separate test method for each set of conditions you want to test&lt;/li&gt;
&lt;li&gt;test method names that describe their function&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is some tests to check if the &lt;code&gt;polls&lt;/code&gt; app not deals with future questions.&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;code-snippet--polls-tests.py&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import datetime

from django.utils import timezone
from django.test import TestCase
from django.urls import reverse

from .models import Question


class QuestionModelTests(TestCase):

    def test_was_published_recently_with_future_question(self):
        &amp;quot;&amp;quot;&amp;quot;
        was_published_recently() returns False for questions whose pub_date
        is in the future.
        &amp;quot;&amp;quot;&amp;quot;
        time = timezone.now() + datetime.timedelta(days=30)
        future_question = Question(pub_date=time)
        self.assertIs(future_question.was_published_recently(), False)

    def test_was_published_recently_with_old_question(self):
        &amp;quot;&amp;quot;&amp;quot;
        was_published_recently() returns False for questions whose pub_date
        is older than 1 day.
        &amp;quot;&amp;quot;&amp;quot;
        time = timezone.now() - datetime.timedelta(days=1, seconds=1)
        old_question = Question(pub_date=time)
        self.assertIs(old_question.was_published_recently(), False)

    def test_was_published_recently_with_recent_question(self):
        &amp;quot;&amp;quot;&amp;quot;
        was_published_recently() returns True for questions whose pub_date
        is within the last day.
        &amp;quot;&amp;quot;&amp;quot;
        time = timezone.now() - datetime.timedelta(hours=23, minutes=59, seconds=59)
        recent_question = Question(pub_date=time)
        self.assertIs(recent_question.was_published_recently(), True)


def create_question(question_text, days):
    &amp;quot;&amp;quot;&amp;quot;
    Create a question with the given `question_text` and published the
    given number of `days` offset to now (negative for questions published
    in the past, positive for questions that have yet to be published).
    &amp;quot;&amp;quot;&amp;quot;
    time = timezone.now() + datetime.timedelta(days=days)
    return Question.objects.create(question_text=question_text, pub_date=time)


class QuestionIndexViewTests(TestCase):
    def test_no_questions(self):
        &amp;quot;&amp;quot;&amp;quot;
        If no questions exist, an appropriate message is displayed.
        &amp;quot;&amp;quot;&amp;quot;
        response = self.client.get(reverse(&#39;polls:index&#39;))
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, &amp;quot;No polls are available.&amp;quot;)
        self.assertQuerysetEqual(response.context[&#39;latest_question_list&#39;], [])

    def test_past_question(self):
        &amp;quot;&amp;quot;&amp;quot;
        Questions with a pub_date in the past are displayed on the
        index page.
        &amp;quot;&amp;quot;&amp;quot;
        create_question(question_text=&amp;quot;Past question.&amp;quot;, days=-30)
        response = self.client.get(reverse(&#39;polls:index&#39;))
        self.assertQuerysetEqual(
            response.context[&#39;latest_question_list&#39;],
            [&#39;&amp;lt;Question: Past question.&amp;gt;&#39;]
        )

    def test_future_question(self):
        &amp;quot;&amp;quot;&amp;quot;
        Questions with a pub_date in the future aren&#39;t displayed on
        the index page.
        &amp;quot;&amp;quot;&amp;quot;
        create_question(question_text=&amp;quot;Future question.&amp;quot;, days=30)
        response = self.client.get(reverse(&#39;polls:index&#39;))
        self.assertContains(response, &amp;quot;No polls are available.&amp;quot;)
        self.assertQuerysetEqual(response.context[&#39;latest_question_list&#39;], [])

    def test_future_question_and_past_question(self):
        &amp;quot;&amp;quot;&amp;quot;
        Even if both past and future questions exist, only past questions
        are displayed.
        &amp;quot;&amp;quot;&amp;quot;
        create_question(question_text=&amp;quot;Past question.&amp;quot;, days=-30)
        create_question(question_text=&amp;quot;Future question.&amp;quot;, days=30)
        response = self.client.get(reverse(&#39;polls:index&#39;))
        self.assertQuerysetEqual(
            response.context[&#39;latest_question_list&#39;],
            [&#39;&amp;lt;Question: Past question.&amp;gt;&#39;]
        )

    def test_two_past_questions(self):
        &amp;quot;&amp;quot;&amp;quot;
        The questions index page may display multiple questions.
        &amp;quot;&amp;quot;&amp;quot;
        create_question(question_text=&amp;quot;Past question 1.&amp;quot;, days=-30)
        create_question(question_text=&amp;quot;Past question 2.&amp;quot;, days=-5)
        response = self.client.get(reverse(&#39;polls:index&#39;))
        self.assertQuerysetEqual(
            response.context[&#39;latest_question_list&#39;],
            [&#39;&amp;lt;Question: Past question 2.&amp;gt;&#39;, &#39;&amp;lt;Question: Past question 1.&amp;gt;&#39;]
        )


class QuestionDetailViewTests(TestCase):
    def test_future_question(self):
        &amp;quot;&amp;quot;&amp;quot;
        The detail view of a question with a pub_date in the future
        returns a 404 not found.
        &amp;quot;&amp;quot;&amp;quot;
        future_question = create_question(question_text=&#39;Future question.&#39;, days=5)
        url = reverse(&#39;polls:detail&#39;, args=(future_question.id,))
        response = self.client.get(url)
        self.assertEqual(response.status_code, 404)

    def test_past_question(self):
        &amp;quot;&amp;quot;&amp;quot;
        The detail view of a question with a pub_date in the past
        displays the question&#39;s text.
        &amp;quot;&amp;quot;&amp;quot;
        past_question = create_question(question_text=&#39;Past Question.&#39;, days=-5)
        url = reverse(&#39;polls:detail&#39;, args=(past_question.id,))
        response = self.client.get(url)
        self.assertContains(response, past_question.question_text)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;customize-the-polls-app-s-look-and-feel&#34;&gt;Customize the &lt;code&gt;polls&lt;/code&gt; app&amp;rsquo;s look and feel&lt;/h2&gt;

&lt;p&gt;Django will look for statis files in the &lt;code&gt;polls/static/&lt;/code&gt; directory. Its &lt;code&gt;STATICFILES_FINDERS&lt;/code&gt; setting contains a list of finders that know how to discover static files from various source. &lt;code&gt;AppDirectoriesFinder&lt;/code&gt; staticfile finder finds the stylesheet at &lt;code&gt;polls/static/polls/style.css&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;code-snippet--polls-static-polls-style.css&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;li a {
    color: green;
}

body {
    background: white url(&amp;quot;images/background.gif&amp;quot;) no-repeat right bottom;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And I add the &lt;code&gt;{% static %}&lt;/code&gt; template tag at the top of &lt;code&gt;polls/templates/polls/index.html&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;code-snippet--polls-templates-polls-index.html&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;{% load static %}

&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; type=&amp;quot;text/css&amp;quot; href=&amp;quot;{% static &#39;polls/style.css&#39; %}&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note always use relative paths to link static files between each other.&lt;/p&gt;

&lt;h2 id=&#34;customize-the-admin-site&#34;&gt;Customize the admin site&lt;/h2&gt;

&lt;p&gt;I customize the admin form by editing &lt;code&gt;polls/admin.py&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;code-snippet--polls-admin.py&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from django.contrib import admin

from .models import Choice, Question


class ChoiceInline(admin.TabularInline):
    model = Choice
    extra = 3


class QuestionAdmin(admin.ModelAdmin):
    fieldsets = [
        (None, {&#39;fields&#39;: [&#39;question_text&#39;]}),
        (&#39;Date information&#39;, {&#39;fields&#39;: [&#39;pub_date&#39;], &#39;classes&#39;: [&#39;collapse&#39;]}),
    ]
    inlines = [ChoiceInline]
    list_display = (&#39;question_text&#39;, &#39;pub_date&#39;, &#39;was_published_recently&#39;)
    list_filter = [&#39;pub_date&#39;]
    search_fields = [&#39;question_text&#39;]

admin.site.register(Question, QuestionAdmin)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I use &lt;code&gt;fieldsets&lt;/code&gt; to split the form up and provide an usability detail. Alternatively, &lt;code&gt;fields&lt;/code&gt; could be directly used here serving only a few fields.&lt;/p&gt;

&lt;p&gt;For &lt;code&gt;ChoiceInline&lt;/code&gt;, with &lt;code&gt;TabularInline&lt;/code&gt;, the related objects are displayed in a compact, table-based format. I could also spread it out using &lt;code&gt;StackInline&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I can also customize the Django admin itself. First I add a &lt;code&gt;DIRS&lt;/code&gt; option in the &lt;code&gt;TEMPLATES&lt;/code&gt; setting in the setting files:&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;code-snippet--mysite-setting.py&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;TEMPLATES = [
    {
        # ...
        &#39;DIRS&#39;: [os.path.join(BASE_DIR, &#39;templates&#39;)],
        # ...
    },
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Find the Django source file, and copy the &lt;code&gt;django/contrib/admin/templates/admin/base_site.html&lt;/code&gt; into &lt;code&gt;templates/admin/&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;python -c &amp;quot;import django; print(django.__path__)&amp;quot;
mkdir templates/admin
cp PATH/django/contrib/admin/templates/admin/base_site.html templates/admin/base_site.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Edit as:&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;code-snippet--templates-admin-base-site.html&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;{% extends &amp;quot;admin/base.html&amp;quot; %}

{% block title %}{{ title }} | {{ site_title|default:_(&#39;Django site admin&#39;) }}{% endblock %}

{% block branding %}
&amp;lt;h1 id=&amp;quot;site-name&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;{% url &#39;admin:index&#39; %}&amp;quot;&amp;gt;Polls Administration&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt;
{% endblock %}

{% block nav-global %}{% endblock %}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;wrap-up&#34;&gt;Wrap up&lt;/h2&gt;

&lt;p&gt;Now my Django app looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;mysite
├── db.sqlite3
├── manage.py
├── mysite
│   ├── __init__.py
│   ├── settings.py
│   ├── urls.py
│   └── wsgi.py
├── polls
│   ├── __init__.py
│   ├── admin.py
│   ├── apps.py
│   ├── migrations
│   │   ├── 0001_initial.py
│   │   ├── __init__.py
│   ├── models.py
│   ├── static
│   │   └── polls
│   │       ├── images
│   │       │   └── background.gif
│   │       └── style.css
│   ├── templates
│   │   └── polls
│   │       ├── detail.html
│   │       ├── index.html
│   │       └── results.html
│   ├── tests.py
│   ├── urls.py
│   └── views.py
└── templates
    └── admin
        └── base_site.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It is also useful to turn the &lt;code&gt;polls&lt;/code&gt; app into a standalone Python package, but it is another story.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
