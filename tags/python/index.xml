<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python | RUNHAN YU</title>
    <link>/tags/python/</link>
      <atom:link href="/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <description>Python</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Fri, 11 Oct 2019 13:58:00 -0700</lastBuildDate>
    <image>
      <url>/img/icon-192.png</url>
      <title>Python</title>
      <link>/tags/python/</link>
    </image>
    
    <item>
      <title>My first Django app</title>
      <link>/post/451.html/</link>
      <pubDate>Fri, 11 Oct 2019 13:58:00 -0700</pubDate>
      <guid>/post/451.html/</guid>
      <description>

&lt;p&gt;This is my implementaion on the &lt;a href=&#34;https://docs.djangoproject.com/en/1.11/intro/tutorial01/&#34; target=&#34;_blank&#34;&gt;Django tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;create-django-project-and-a-polls-app&#34;&gt;Create Django project and a &lt;code&gt;polls&lt;/code&gt; app&lt;/h2&gt;

&lt;p&gt;First, I verify my Django installation and version by:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;python -m django --version
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If Python (use 3 here) or Django (1.11.23 here) is not installed, go by:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install python
mkdir ~/.venvs/venv
python3 -m venv ~/.venvs/venv
source ~/.venvs/venv/bin/activate
pip install django==1.11.23
pip install psycopg2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now I could create a project with a collection of settings for an instance of Django. Avoid naming projects after built-in Python (&lt;code&gt;test&lt;/code&gt;) or Django (&lt;code&gt;django&lt;/code&gt;) components. And for security, put codes in some directory outside of the document root, such as &lt;code&gt;/home/mycode&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;django-admin startproject mysite
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And this creates:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;mysite
├── manage.py # a command-line utility
└── mysite # actual Python package for mysite project
    ├── __init__.py
    ├── settings.py # settings/configuration
    ├── urls.py # URL declaration; a &#39;table of contents&#39; of the Django-powered site
    └── wsgi.py # entry-point for WSGI-compatible web servers to serve the project
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I could run and verify the function of the development server (default port is 8000)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;python manage.py runserver 8001
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The development server automatically reloads Python code for each request as needed.&lt;/p&gt;

&lt;p&gt;Now I have a project (a collection of configuration), I want to create some apps for the website right next to my &lt;code&gt;manage.py&lt;/code&gt; as a top-level module. So I create the Polls app by:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;python manage.py startapp polls
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And this creates:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;polls
├── __init__.py
├── admin.py
├── apps.py
├── migrations
│   └── __init__.py
├── models.py
├── tests.py
└── views.py
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;write-my-first-view-for-the-polls-app&#34;&gt;Write my first &lt;code&gt;view&lt;/code&gt; for the &lt;code&gt;polls&lt;/code&gt; app&lt;/h2&gt;

&lt;p&gt;Edit &lt;code&gt;polls/views.py&lt;/code&gt; as:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from django.shortcuts import render
from django.http import HttpResponse

def index(request):
    return HttpResponse(&amp;quot;Hello, world. You&#39;re at the polls index.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Map the view it to a URL by URLconf &lt;code&gt;polls/urls.py&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;code-snippet--polls-urls.py&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from django.conf.urls import url

from . import views

urlpatterns = [
    url(r&#39;^$&#39;, views.index, name=&#39;index&#39;),
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And point the root URLconf at the &lt;code&gt;polls.urls&lt;/code&gt; module by editing &lt;code&gt;mysite/urls.py&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;code-snippet--mysite-urls.py&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from django.conf.urls import url, include
from django.contrib import admin

urlpatterns = [
    url(r&#39;^polls/&#39;, include(&#39;polls.urls&#39;)),
    url(r&#39;^admin/&#39;, admin.site.urls),
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;include()&lt;/code&gt; function allows referencing other URLconfs. You should always use &lt;code&gt;include()&lt;/code&gt; when you include other URL patterns. &lt;code&gt;admin.site.urls&lt;/code&gt; is the only exception to this.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;url(regex, view, [kwargs, name])&lt;/code&gt; function is passed four arguments.
Note that the &lt;code&gt;regex&lt;/code&gt; does not search GET and POST parameters, or the domain name.&lt;/p&gt;

&lt;h2 id=&#34;setup-database-for-django-apps&#34;&gt;Setup database for Django apps&lt;/h2&gt;

&lt;p&gt;Prepare PostgreSQL database:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install postgresql@10
brew link postgresql@10 --force
brew services start postgresql@10
createuser --superuser djangouser
createdb -O djangouser djangodb
psql djangodb; ALTER USER djangouser PASSWORD &#39;mypassword&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Setup database in &lt;code&gt;mysite/settings.py&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;code-snippet--mysite-settings.py&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;DATABASES = {
    &#39;default&#39;: {
        &#39;ENGINE&#39;: &#39;django.db.backends.postgresql&#39;,
        &#39;NAME&#39;: &#39;djangodb&#39;,
        &#39;USER&#39;: &#39;djangouser&#39;,
        &#39;PASSWORD&#39;: &#39;mypassword&#39;,
        &#39;HOST&#39;: &#39;127.0.0.1&#39;,
        &#39;PORT&#39;: &#39;5432&#39;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then run &lt;code&gt;migrate&lt;/code&gt; command to create the tables for &lt;code&gt;INSTALLED_APPS&lt;/code&gt; in the database, currently for &lt;code&gt;admin&lt;/code&gt;, &lt;code&gt;auth&lt;/code&gt;, &lt;code&gt;contenttypes&lt;/code&gt; and &lt;code&gt;sessions&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;python manage.py migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;create-models-for-the-polls-app&#34;&gt;Create Models for the &lt;code&gt;polls&lt;/code&gt; app&lt;/h2&gt;

&lt;h3 id=&#34;change-models-in-models-dot-py&#34;&gt;Change models in &lt;code&gt;models.py&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Now I will define my models, essentially my database layout with additional metadata. Note Django follows the DRY (Don&amp;rsquo;t Repeat Yourself, every piece of knowledge must have a single, unambiguous, authoritative representation within a system) principle.&lt;/p&gt;

&lt;p&gt;I create two models &lt;code&gt;Questions&lt;/code&gt; and &lt;code&gt;Choice&lt;/code&gt; in my simple poll app:&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;code-snippet--polls-models.py&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from django.db import models
from django.utils.encoding import python_2_unicode_compatible

@python_2_unicode_compatible # support Python 2
class Question(models.Model):
    question_text = models.CharField(max_length=200) # field
    pub_date = models.DateTimeField(&#39;date published&#39;)

    # it is important to add object representation
    # especially for Django&#39;s automatically-generated admin
    def __str__(self):
        return self.question_text

    # custom method for demonstration
    def was_published_recently(self):
        now = timezone.now()
        return now - datetime.timedelta(days=1) &amp;lt;= self.pub_date &amp;lt;= now

    # custom the question change list in admin view
    was_published_recently.admin_order_field = &#39;pub_date&#39;
    was_published_recently.boolean = True # use icon to represent true or false
    was_published_recently.short_description = &#39;Published recently?&#39;

class Choice(models.Model):
    question = models.ForeignKey(Question, on_delete=models.CASCADE) # relationship
    choice_text = models.CharField(max_length=200)
    votes = models.IntegerField(default=0)
    def __str__(self):
        return self.choice_text
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then I could add a reference of &lt;code&gt;polls&lt;/code&gt; app to its configuration class in the &lt;code&gt;INSTALLED_APPS&lt;/code&gt; setting.&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;code-snippet--mysite-settings.py&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;INSTALLED_APPS = [
    &#39;polls.apps.PollsConfig&#39;,
    &#39;django.contrib.admin&#39;,
    &#39;django.contrib.auth&#39;,
    &#39;django.contrib.contenttypes&#39;,
    &#39;django.contrib.sessions&#39;,
    &#39;django.contrib.messages&#39;,
    &#39;django.contrib.staticfiles&#39;,
]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;run-python-manage-dot-py-makemigrations-to-create-migrations-for-those-changes&#34;&gt;Run &lt;code&gt;python manage.py makemigrations&lt;/code&gt; to create migrations for those changes&lt;/h3&gt;

&lt;p&gt;Now run the command to tell Django that I would like store the changes for &lt;code&gt;polls&lt;/code&gt; as a &lt;em&gt;migration&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;python manage.py makemigrations polls
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I could also see the SQL that migration would run by:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;python manage.py sqlmigrate polls 0001
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;BEGIN;
--
-- Create model Choice
--
CREATE TABLE &amp;quot;polls_choice&amp;quot; (&amp;quot;id&amp;quot; serial NOT NULL PRIMARY KEY, &amp;quot;choice_text&amp;quot; varchar(200
) NOT NULL, &amp;quot;votes&amp;quot; integer NOT NULL);
--
-- Create model Question
--
CREATE TABLE &amp;quot;polls_question&amp;quot; (&amp;quot;id&amp;quot; serial NOT NULL PRIMARY KEY, &amp;quot;question_text&amp;quot; varchar
(200) NOT NULL, &amp;quot;pub_date&amp;quot; timestamp with time zone NOT NULL);
--
-- Add field question to choice
--
ALTER TABLE &amp;quot;polls_choice&amp;quot; ADD COLUMN &amp;quot;question_id&amp;quot; integer NOT NULL;
CREATE INDEX &amp;quot;polls_choice_question_id_c5b4b260&amp;quot; ON &amp;quot;polls_choice&amp;quot; (&amp;quot;question_id&amp;quot;);
ALTER TABLE &amp;quot;polls_choice&amp;quot; ADD CONSTRAINT &amp;quot;polls_choice_question_id_c5b4b260_fk_polls_qu
estion_id&amp;quot; FOREIGN KEY (&amp;quot;question_id&amp;quot;) REFERENCES &amp;quot;polls_question&amp;quot; (&amp;quot;id&amp;quot;) DEFERRABLE INI
TIALLY DEFERRED;
COMMIT;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;run-python-manage-dot-py-migrate-to-apply-those-changes-to-the-database&#34;&gt;Run &lt;code&gt;python manage.py migrate&lt;/code&gt; to apply those changes to the database&lt;/h3&gt;

&lt;p&gt;Then I create those model tables in my database by running &lt;code&gt;migrate&lt;/code&gt; again:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;python manage.py migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;use-django-apis-to-interact-with-the-polls-app&#34;&gt;Use Django APIs to interact with the &lt;code&gt;polls&lt;/code&gt; app&lt;/h2&gt;

&lt;p&gt;Now I could play with the Django API using the Python shell under &lt;code&gt;DJANGO_SETTINGS_MODULE environment variable&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ python manage.py shell
&amp;gt;&amp;gt;&amp;gt; from polls.models import Question, Choice
&amp;gt;&amp;gt;&amp;gt; Question.objects.all()
&amp;gt;&amp;gt;&amp;gt; from django.utils import timezone
&amp;gt;&amp;gt;&amp;gt; q = Question(question_text=&amp;quot;What&#39;s new?&amp;quot;, pub_date=timezone.now())
&amp;gt;&amp;gt;&amp;gt; q.save()
&amp;gt;&amp;gt;&amp;gt; q.id
&amp;gt;&amp;gt;&amp;gt; q.question_text
&amp;gt;&amp;gt;&amp;gt; q.pub_date
&amp;gt;&amp;gt;&amp;gt; Question.objects.get(pub_date__year=timezone.now().year)
&amp;gt;&amp;gt;&amp;gt; Question.objects.get(id=1) # identical to Question.objects.get(pk=1)
&amp;gt;&amp;gt;&amp;gt; q.was_published_recently()
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;use-django-admin-to-manage-the-question-object&#34;&gt;Use Django Admin to manage the &lt;code&gt;Question&lt;/code&gt; object&lt;/h2&gt;

&lt;p&gt;Django was written in a newsroom environment. The admin is intended to be used for site managers to edit content.&lt;/p&gt;

&lt;p&gt;An admin could be created by:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;python manage.py createsuperuser
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then I could login through &lt;a href=&#34;http://127.0.0.1:8001/admin/&#34; target=&#34;_blank&#34;&gt;http://127.0.0.1:8001/admin/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Don&amp;rsquo;t forget to register the Question object with an admin interface by:&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;code-snippet--polls-admin.py&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from django.contrib import admin
from .models import Question

admin.site.register(Question)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;four-public-interface-views-for-the-polls-app&#34;&gt;Four public interface &lt;code&gt;views&lt;/code&gt; for the &lt;code&gt;polls&lt;/code&gt; app&lt;/h2&gt;

&lt;p&gt;I will create four views for the &lt;code&gt;polls&lt;/code&gt; app:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Question &amp;ldquo;index&amp;rdquo; page: displays the latest few questions.&lt;/li&gt;
&lt;li&gt;Question &amp;ldquo;detail&amp;rdquo; page: displays a question text, with no results but with a form to vote.&lt;/li&gt;
&lt;li&gt;Question &amp;ldquo;results&amp;rdquo; page: displays results for a particular question.&lt;/li&gt;
&lt;li&gt;Vote action: handles voting for a particular choice in a particular question.&lt;/li&gt;
&lt;/ul&gt;

&lt;!--listend--&gt;

&lt;p&gt;&lt;a id=&#34;code-snippet--polls-views.py&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from django.shortcuts import render
from django.http import HttpResponse

def index(request):
    return HttpResponse(&amp;quot;Hello, world. You&#39;re at the polls index.&amp;quot;)

def detail(request, question_id):
    return HttpResponse(&amp;quot;You&#39;re looking at question %s.&amp;quot; % question_id)

def results(request, question_id):
    return HttpResponse(response % question_id)

def vote(request, question_id):
    return HttpResponse(&amp;quot;You&#39;re voting on question %s.&amp;quot; % question_id)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a id=&#34;code-snippet--polls-urls.py&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from django.conf.urls import url

from . import views

app_name = &#39;polls&#39;
urlpatterns = [
    # e.g. /polls/
    url(r&#39;^$&#39;, views.index, name=&#39;index&#39;),
    # e.g. /polls/5/
    url(r&#39;^(?P&amp;lt;question_id&amp;gt;[0-9]+)/$&#39;, views.detail, name=&#39;detail&#39;),
    # e.g. /polls/5/results/
    url(r&#39;^(?P&amp;lt;question_id&amp;gt;[0-9]+)/results/$&#39;, views.results, name=&#39;results&#39;),
    # e.g. /polls/5/vote/
    url(r&#39;^(?P&amp;lt;question_id&amp;gt;[0-9]+)/vote/$&#39;, views.vote, name=&#39;vote&#39;),
]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;index-view&#34;&gt;Index view&lt;/h3&gt;

&lt;p&gt;I could use &lt;code&gt;templates&lt;/code&gt; directory to seperate design from Python:&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;code-snippet--polls-templates-polls-index.html&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;{% if latest_question_list %}
    &amp;lt;ul&amp;gt;
    {% for question in latest_question_list %}
        &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;{% url &#39;polls:detail&#39; question.id %}&amp;quot;&amp;gt;{{ question.question_text }}&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
    {% endfor %}
    &amp;lt;/ul&amp;gt;
{% else %}
    &amp;lt;p&amp;gt;No polls are available.&amp;lt;/p&amp;gt;
{% endif %}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here I use &lt;code&gt;&amp;lt;a href=&amp;quot;{% url &#39;polls:detail&#39; question.id %}&amp;quot;&amp;gt;&lt;/code&gt; to avoid hardcoded link like &lt;code&gt;&amp;lt;a href=&amp;quot;/polls/{{ question.id }}/&amp;quot;&amp;gt;&lt;/code&gt;, so that it look up the URL definition as specified in the &lt;code&gt;polls.url&lt;/code&gt; module. I use &lt;code&gt;polls:detail&lt;/code&gt; here to point at the namespaced detail view, as &lt;code&gt;&#39;polls&#39;&lt;/code&gt; is specified as &lt;code&gt;app_name&lt;/code&gt; in &lt;code&gt;polls/urls.py&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;code-snippet--polls-views.py&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# ...
from django.utils import timezone
from .models import Question

def index(request):
    latest_question_list = Question.objects.filter(
        pub_date__lte=timezone.now()
    ).order_by(&#39;-pub_date&#39;)[:5]
    context = {&#39;latest_question_list&#39;: latest_question_list}
    return render(request, &#39;polls/index.html&#39;, context)
# ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here I use &lt;code&gt;render()&lt;/code&gt; shortcut for &lt;code&gt;HttpResponse(loader.get_template(file).render(context, request))&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;detail-view-or-raise-a-404-error&#34;&gt;Detail view or raise a 404 error&lt;/h3&gt;

&lt;p&gt;Each view is responsible for doing one of two things: returning an &lt;code&gt;HttpResponse&lt;/code&gt; object containing the content for the requested page, or raising an exception such as &lt;code&gt;Http404&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;code-snippet--polls-templates-polls-detail.html&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;h1&amp;gt;{{ question.question_text }}&amp;lt;/h1&amp;gt;
&amp;lt;ul&amp;gt;
{% for choice in question.choice_set.all %}
    &amp;lt;li&amp;gt;{{ choice.choice_text }}&amp;lt;/li&amp;gt;
{% endfor %}
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a id=&#34;code-snippet--polls-views.py&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from django.shortcuts import get_object_or_404, render
from .models import Question
# ...
def detail(request, question_id):
    question = get_object_or_404(
        Question.objects.filter(pub_date__lte=timezone.now()), pk=question_id
    )
    return render(request, &#39;polls/detail.html&#39;, {&#39;question&#39;: question})
# ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here I use &lt;code&gt;get_object_or_404()&lt;/code&gt; shortcut for &lt;code&gt;Http404&lt;/code&gt; exception.&lt;/p&gt;

&lt;h3 id=&#34;vote-view-creating-a-simple-form&#34;&gt;Vote view: creating a simple form&lt;/h3&gt;

&lt;p&gt;Now I update my poll detail template and add a simple form to it.&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;code-snippet--polls-templates-polls-detail.html&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;h1&amp;gt;{{ question.question_text }}&amp;lt;/h1&amp;gt;

{% if error_message %}&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;{{ error_message }}&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;{% endif %}

&amp;lt;!--POST, act of submitting form will alter data server-side--&amp;gt;
&amp;lt;form action=&amp;quot;{% url &#39;polls:vote&#39; question.id %}&amp;quot; method=&amp;quot;post&amp;quot;&amp;gt;
  &amp;lt;!--this protect from Cross Site Request Forgeries--&amp;gt;
  {% csrf_token %}
  {% for choice in question.choice_set.all %}
  &amp;lt;!--display a radio button which POST data choice=choice.id--&amp;gt;
  &amp;lt;input type=&amp;quot;radio&amp;quot; name=&amp;quot;choice&amp;quot; id=&amp;quot;choice{{ forloop.counter }}&amp;quot; value=&amp;quot;{{ choice.id }}&amp;quot; /&amp;gt;
  &amp;lt;label for=&amp;quot;choice{{ forloop.counter }}&amp;quot;&amp;gt;{{ choice.choice_text }}&amp;lt;/label&amp;gt;&amp;lt;br /&amp;gt;
  {% endfor %}
  &amp;lt;input type=&amp;quot;submit&amp;quot; value=&amp;quot;Vote&amp;quot; /&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note all POST forms that are targeted at internal URLs should use the &lt;code&gt;{% csrf_token %}&lt;/code&gt; template tag to protect from Cross Site Request Forgeries.&lt;/p&gt;

&lt;p&gt;And I also replace the dummy implementation of the &lt;code&gt;vote()&lt;/code&gt; function with a real one.&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;code-snippet--polls-views.py&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from django.shortcuts import get_object_or_404, render
from django.http import HttpResponseRedirect, HttpResponse
from django.urls import reverse

from .models import Choice, Question
# ...
def vote(request, question_id):
    question = get_object_or_404(Question, pk=question_id)
    try:
        selected_choice = question.choice_set.get(pk=request.POST[&#39;choice&#39;])
    except (KeyError, Choice.DoesNotExist):
        # Redisplay the question voting form.
        return render(request, &#39;polls/detail.html&#39;, {
            &#39;question&#39;: question,
            &#39;error_message&#39;: &amp;quot;You didn&#39;t select a choice.&amp;quot;,
        })
    else:
        selected_choice.votes += 1
        selected_choice.save()
        # Always return an HttpResponseRedirect after successfully dealing
        # with POST data. This prevents data from being posted twice if a
        # user hits the Back button.
        return HttpResponseRedirect(reverse(&#39;polls:results&#39;, args=(question.id,)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that always return an HttpResponseRedirect after successfully dealing with POST data to prevent from posting data twice if a user hits the Back button. And I use the &lt;code&gt;reverse()&lt;/code&gt; function in the &lt;code&gt;HttpResponseRedirect&lt;/code&gt; constructor to help avoid hardcoding a URL in the view function.&lt;/p&gt;

&lt;p&gt;And note that this &lt;code&gt;vote()&lt;/code&gt; have a &lt;em&gt;race condition&lt;/em&gt; problem: if two users of my website try to vote at &lt;em&gt;exactly the same time&lt;/em&gt;, the computed new value of &lt;code&gt;votes&lt;/code&gt; might go wrong.&lt;/p&gt;

&lt;h3 id=&#34;result-view&#34;&gt;Result view&lt;/h3&gt;

&lt;p&gt;Now I implement the &lt;code&gt;result()&lt;/code&gt; view by creating a result template and update the view.&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;code-snippet--polls-templates-polls-results.html&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;h1&amp;gt;{{ question.question_text }}&amp;lt;/h1&amp;gt;

&amp;lt;ul&amp;gt;
  {% for choice in question.choice_set.all %}
  &amp;lt;li&amp;gt;{{ choice.choice_text }} -- {{ choice.votes }} vote{{ choice.votes|pluralize }}&amp;lt;/li&amp;gt;
  {% endfor %}
&amp;lt;/ul&amp;gt;

&amp;lt;a href=&amp;quot;{% url &#39;polls:detail&#39; question.id %}&amp;quot;&amp;gt;Vote again?&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a id=&#34;code-snippet--polls-view.py&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# ...
def results(request, question_id):
    question = get_object_or_404(
        Question.objects.filter(pub_date__lte=timezone.now), pk=question_id
    )
    return render(request, &#39;polls/results.html&#39;, {&#39;question&#39;: question})
# ...
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;use-django-s-generic-views-instead-for-some-simple-views-in-the-polls-app&#34;&gt;Use Django&amp;rsquo;s generic views instead for some simple views in the &lt;code&gt;polls&lt;/code&gt; app&lt;/h2&gt;

&lt;p&gt;Since it is pretty common for basic Web development to get data from the database according a passing parameter in the URL, loading a template and returning template, Django provides generic views for the simple  &lt;code&gt;detail()&lt;/code&gt;, &lt;code&gt;results()&lt;/code&gt; and &lt;code&gt;index()&lt;/code&gt; views.&lt;/p&gt;

&lt;p&gt;In practice, when writing a Django app, people evaluate whether generic views are a good fit for their problem, and use them from the beginning.&lt;/p&gt;

&lt;p&gt;I amend the &lt;code&gt;polls/urls.py&lt;/code&gt; URLconf:&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;code-snippet--polls-urls.py&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from django.conf.urls import url

from . import views

app_name = &#39;polls&#39;
urlpatterns = [
    # e.g. /polls/
    url(r&#39;^$&#39;, views.IndexView.as_view(), name=&#39;index&#39;),
    # e.g. /polls/5/
    url(r&#39;^(?P&amp;lt;pk&amp;gt;[0-9]+)/$&#39;, views.DetailView.as_view(), name=&#39;detail&#39;),
    # e.g. /polls/5/results/
    url(r&#39;^(?P&amp;lt;pk&amp;gt;[0-9]+)/results/$&#39;, views.ResultsView.as_view(), name=&#39;results&#39;),
    # e.g. /polls/5/vote/
    url(r&#39;^(?P&amp;lt;question_id&amp;gt;[0-9]+)/vote/$&#39;, views.vote, name=&#39;vote&#39;),
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note &lt;code&gt;&amp;lt;question_id&amp;gt;&lt;/code&gt; in second and third patterns changes to &lt;code&gt;&amp;lt;pk&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I also amend &lt;code&gt;index()&lt;/code&gt;, &lt;code&gt;detail()&lt;/code&gt; and &lt;code&gt;results()&lt;/code&gt; views with Django&amp;rsquo;s generic views:&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;code-snippet--polls-view.py&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from django.shortcuts import get_object_or_404, render
from django.http import HttpResponseRedirect
from django.urls import reverse
from django.views import generic
from django.utils import timezone

from .models import Choice, Question


class IndexView(generic.ListView):
    template_name = &#39;polls/index.html&#39;
    context_object_name = &#39;latest_question_list&#39;

    def get_queryset(self):
        return Question.objects.filter(
            pub_date__lte=timezone.now()
        ).order_by(&#39;-pub_date&#39;)[:5]


class DetailView(generic.DetailView):
    model = Question
    template_name = &#39;polls/detail.html&#39;

    def get_queryset(self):
        return Question.objects.filter(pub_date__lte=timezone.now())


class ResultsView(generic.DetailView):
    model = Question
    template_name = &#39;polls/results.html&#39;

    def get_queryset(self):
        return Question.objects.filter(pub_date__lte=timezone.now())

# ...
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;automated-testing&#34;&gt;Automated testing&lt;/h2&gt;

&lt;p&gt;I will create some automated tests so that as I make changes to my app, I could check that my code still works well. Besides,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tests will save time&lt;/li&gt;
&lt;li&gt;Tests don&amp;rsquo;t just identify problems, they prevent them&lt;/li&gt;
&lt;li&gt;Tests make my code more attractive&lt;/li&gt;
&lt;li&gt;Tests help teams work together&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Rules of thumb:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a separate TestClass for each model or view&lt;/li&gt;
&lt;li&gt;a separate test method for each set of conditions you want to test&lt;/li&gt;
&lt;li&gt;test method names that describe their function&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is some tests to check if the &lt;code&gt;polls&lt;/code&gt; app not deals with future questions.&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;code-snippet--polls-tests.py&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import datetime

from django.utils import timezone
from django.test import TestCase
from django.urls import reverse

from .models import Question


class QuestionModelTests(TestCase):

    def test_was_published_recently_with_future_question(self):
        &amp;quot;&amp;quot;&amp;quot;
        was_published_recently() returns False for questions whose pub_date
        is in the future.
        &amp;quot;&amp;quot;&amp;quot;
        time = timezone.now() + datetime.timedelta(days=30)
        future_question = Question(pub_date=time)
        self.assertIs(future_question.was_published_recently(), False)

    def test_was_published_recently_with_old_question(self):
        &amp;quot;&amp;quot;&amp;quot;
        was_published_recently() returns False for questions whose pub_date
        is older than 1 day.
        &amp;quot;&amp;quot;&amp;quot;
        time = timezone.now() - datetime.timedelta(days=1, seconds=1)
        old_question = Question(pub_date=time)
        self.assertIs(old_question.was_published_recently(), False)

    def test_was_published_recently_with_recent_question(self):
        &amp;quot;&amp;quot;&amp;quot;
        was_published_recently() returns True for questions whose pub_date
        is within the last day.
        &amp;quot;&amp;quot;&amp;quot;
        time = timezone.now() - datetime.timedelta(hours=23, minutes=59, seconds=59)
        recent_question = Question(pub_date=time)
        self.assertIs(recent_question.was_published_recently(), True)


def create_question(question_text, days):
    &amp;quot;&amp;quot;&amp;quot;
    Create a question with the given `question_text` and published the
    given number of `days` offset to now (negative for questions published
    in the past, positive for questions that have yet to be published).
    &amp;quot;&amp;quot;&amp;quot;
    time = timezone.now() + datetime.timedelta(days=days)
    return Question.objects.create(question_text=question_text, pub_date=time)


class QuestionIndexViewTests(TestCase):
    def test_no_questions(self):
        &amp;quot;&amp;quot;&amp;quot;
        If no questions exist, an appropriate message is displayed.
        &amp;quot;&amp;quot;&amp;quot;
        response = self.client.get(reverse(&#39;polls:index&#39;))
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, &amp;quot;No polls are available.&amp;quot;)
        self.assertQuerysetEqual(response.context[&#39;latest_question_list&#39;], [])

    def test_past_question(self):
        &amp;quot;&amp;quot;&amp;quot;
        Questions with a pub_date in the past are displayed on the
        index page.
        &amp;quot;&amp;quot;&amp;quot;
        create_question(question_text=&amp;quot;Past question.&amp;quot;, days=-30)
        response = self.client.get(reverse(&#39;polls:index&#39;))
        self.assertQuerysetEqual(
            response.context[&#39;latest_question_list&#39;],
            [&#39;&amp;lt;Question: Past question.&amp;gt;&#39;]
        )

    def test_future_question(self):
        &amp;quot;&amp;quot;&amp;quot;
        Questions with a pub_date in the future aren&#39;t displayed on
        the index page.
        &amp;quot;&amp;quot;&amp;quot;
        create_question(question_text=&amp;quot;Future question.&amp;quot;, days=30)
        response = self.client.get(reverse(&#39;polls:index&#39;))
        self.assertContains(response, &amp;quot;No polls are available.&amp;quot;)
        self.assertQuerysetEqual(response.context[&#39;latest_question_list&#39;], [])

    def test_future_question_and_past_question(self):
        &amp;quot;&amp;quot;&amp;quot;
        Even if both past and future questions exist, only past questions
        are displayed.
        &amp;quot;&amp;quot;&amp;quot;
        create_question(question_text=&amp;quot;Past question.&amp;quot;, days=-30)
        create_question(question_text=&amp;quot;Future question.&amp;quot;, days=30)
        response = self.client.get(reverse(&#39;polls:index&#39;))
        self.assertQuerysetEqual(
            response.context[&#39;latest_question_list&#39;],
            [&#39;&amp;lt;Question: Past question.&amp;gt;&#39;]
        )

    def test_two_past_questions(self):
        &amp;quot;&amp;quot;&amp;quot;
        The questions index page may display multiple questions.
        &amp;quot;&amp;quot;&amp;quot;
        create_question(question_text=&amp;quot;Past question 1.&amp;quot;, days=-30)
        create_question(question_text=&amp;quot;Past question 2.&amp;quot;, days=-5)
        response = self.client.get(reverse(&#39;polls:index&#39;))
        self.assertQuerysetEqual(
            response.context[&#39;latest_question_list&#39;],
            [&#39;&amp;lt;Question: Past question 2.&amp;gt;&#39;, &#39;&amp;lt;Question: Past question 1.&amp;gt;&#39;]
        )


class QuestionDetailViewTests(TestCase):
    def test_future_question(self):
        &amp;quot;&amp;quot;&amp;quot;
        The detail view of a question with a pub_date in the future
        returns a 404 not found.
        &amp;quot;&amp;quot;&amp;quot;
        future_question = create_question(question_text=&#39;Future question.&#39;, days=5)
        url = reverse(&#39;polls:detail&#39;, args=(future_question.id,))
        response = self.client.get(url)
        self.assertEqual(response.status_code, 404)

    def test_past_question(self):
        &amp;quot;&amp;quot;&amp;quot;
        The detail view of a question with a pub_date in the past
        displays the question&#39;s text.
        &amp;quot;&amp;quot;&amp;quot;
        past_question = create_question(question_text=&#39;Past Question.&#39;, days=-5)
        url = reverse(&#39;polls:detail&#39;, args=(past_question.id,))
        response = self.client.get(url)
        self.assertContains(response, past_question.question_text)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;customize-the-polls-app-s-look-and-feel&#34;&gt;Customize the &lt;code&gt;polls&lt;/code&gt; app&amp;rsquo;s look and feel&lt;/h2&gt;

&lt;p&gt;Django will look for statis files in the &lt;code&gt;polls/static/&lt;/code&gt; directory. Its &lt;code&gt;STATICFILES_FINDERS&lt;/code&gt; setting contains a list of finders that know how to discover static files from various source. &lt;code&gt;AppDirectoriesFinder&lt;/code&gt; staticfile finder finds the stylesheet at &lt;code&gt;polls/static/polls/style.css&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;code-snippet--polls-static-polls-style.css&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;li a {
    color: green;
}

body {
    background: white url(&amp;quot;images/background.gif&amp;quot;) no-repeat right bottom;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And I add the &lt;code&gt;{% static %}&lt;/code&gt; template tag at the top of &lt;code&gt;polls/templates/polls/index.html&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;code-snippet--polls-templates-polls-index.html&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;{% load static %}

&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; type=&amp;quot;text/css&amp;quot; href=&amp;quot;{% static &#39;polls/style.css&#39; %}&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note always use relative paths to link static files between each other.&lt;/p&gt;

&lt;h2 id=&#34;customize-the-admin-site&#34;&gt;Customize the admin site&lt;/h2&gt;

&lt;p&gt;I customize the admin form by editing &lt;code&gt;polls/admin.py&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;code-snippet--polls-admin.py&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from django.contrib import admin

from .models import Choice, Question


class ChoiceInline(admin.TabularInline):
    model = Choice
    extra = 3


class QuestionAdmin(admin.ModelAdmin):
    fieldsets = [
        (None, {&#39;fields&#39;: [&#39;question_text&#39;]}),
        (&#39;Date information&#39;, {&#39;fields&#39;: [&#39;pub_date&#39;], &#39;classes&#39;: [&#39;collapse&#39;]}),
    ]
    inlines = [ChoiceInline]
    list_display = (&#39;question_text&#39;, &#39;pub_date&#39;, &#39;was_published_recently&#39;)
    list_filter = [&#39;pub_date&#39;]
    search_fields = [&#39;question_text&#39;]

admin.site.register(Question, QuestionAdmin)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I use &lt;code&gt;fieldsets&lt;/code&gt; to split the form up and provide an usability detail. Alternatively, &lt;code&gt;fields&lt;/code&gt; could be directly used here serving only a few fields.&lt;/p&gt;

&lt;p&gt;For &lt;code&gt;ChoiceInline&lt;/code&gt;, with &lt;code&gt;TabularInline&lt;/code&gt;, the related objects are displayed in a compact, table-based format. I could also spread it out using &lt;code&gt;StackInline&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I can also customize the Django admin itself. First I add a &lt;code&gt;DIRS&lt;/code&gt; option in the &lt;code&gt;TEMPLATES&lt;/code&gt; setting in the setting files:&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;code-snippet--mysite-setting.py&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;TEMPLATES = [
    {
        # ...
        &#39;DIRS&#39;: [os.path.join(BASE_DIR, &#39;templates&#39;)],
        # ...
    },
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Find the Django source file, and copy the &lt;code&gt;django/contrib/admin/templates/admin/base_site.html&lt;/code&gt; into &lt;code&gt;templates/admin/&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;python -c &amp;quot;import django; print(django.__path__)&amp;quot;
mkdir templates/admin
cp PATH/django/contrib/admin/templates/admin/base_site.html templates/admin/base_site.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Edit as:&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;code-snippet--templates-admin-base-site.html&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;{% extends &amp;quot;admin/base.html&amp;quot; %}

{% block title %}{{ title }} | {{ site_title|default:_(&#39;Django site admin&#39;) }}{% endblock %}

{% block branding %}
&amp;lt;h1 id=&amp;quot;site-name&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;{% url &#39;admin:index&#39; %}&amp;quot;&amp;gt;Polls Administration&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt;
{% endblock %}

{% block nav-global %}{% endblock %}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;wrap-up&#34;&gt;Wrap up&lt;/h2&gt;

&lt;p&gt;Now my Django app looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;mysite
├── db.sqlite3
├── manage.py
├── mysite
│   ├── __init__.py
│   ├── settings.py
│   ├── urls.py
│   └── wsgi.py
├── polls
│   ├── __init__.py
│   ├── admin.py
│   ├── apps.py
│   ├── migrations
│   │   ├── 0001_initial.py
│   │   ├── __init__.py
│   ├── models.py
│   ├── static
│   │   └── polls
│   │       ├── images
│   │       │   └── background.gif
│   │       └── style.css
│   ├── templates
│   │   └── polls
│   │       ├── detail.html
│   │       ├── index.html
│   │       └── results.html
│   ├── tests.py
│   ├── urls.py
│   └── views.py
└── templates
    └── admin
        └── base_site.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It is also useful to turn the &lt;code&gt;polls&lt;/code&gt; app into a standalone Python package, but it is another story.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hacking the Data Transformation Interview</title>
      <link>/post/448.html/</link>
      <pubDate>Fri, 30 Aug 2019 11:14:00 -0400</pubDate>
      <guid>/post/448.html/</guid>
      <description>&lt;p&gt;I am currently (still) seeking a job in data/software engineering area, and I am preparing for all kinds of technical interviews, ranging from coding, algorithm, system design, SQL to computer science fundamental quiz. Data engineer is a role with vague definition, and people with this title functions as an ETL (extract, transformation, load) engineer in some companies. Thus, topics on data transformation could be covered during the interview. In this blog, I am trying to hack interview focusing on data tranformation.&lt;/p&gt;

&lt;h2 id=&#34;prerequisites-boto3&#34;&gt;Prerequisites: boto3&lt;/h2&gt;

&lt;p&gt;Boto is the AWS SDK for python, which provides easy-to-use, object-oriented API and low-level access to AWS services. We could find the documentation &lt;a href=&#34;https://boto3.amazonaws.com/v1/documentation/api/latest/index.html&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We could easily install the latest Boto 3 release via pip:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ pip install boto3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then configure the credential file at &lt;code&gt;~/.aws/credentials&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-nil&#34;&gt;[default]
aws_access_key_id = YOUR_ACCESS_KEY
aws_secret_access_key = YOUR_SECRET_KEY
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And set the default region at &lt;code&gt;~/.aws/config&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-nil&#34;&gt;[default]
region=us-east-1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To use boto3, we could import it and pass the service-to-use to it. For example, to use Amazon S3, we could choose a resource by:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import boto3
s3 = boto3.resource(&#39;s3&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Create a s3 bucket over client level:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;s3_client = boto3.client(&#39;s3&#39;)
s3_client.create_bucket(Bucket=&#39;BUCKET_NAME&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;List existing buckets for the AWS account:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;response = s3_client.list_buckets()
for bucket in response[&#39;Buckets&#39;]:
    print(f&#39;  {bucket[&amp;quot;Name&amp;quot;]}&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Upload file into a s3 bucket:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;response = s3_client.upload_file(file_name, bucket, object_name)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or upload object in binary mode into a s3 bucket:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;with open(&#39;test.jpg&#39;, &#39;rb&#39;) as f:
    s3.upload_fileobj(f, &amp;quot;BUCKET_NAME&amp;quot;, &amp;quot;OBJECT_NAME&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or directly put object into a s3 bucket over the bucket level:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;data = open(&#39;test.jpg&#39;, &#39;rb&#39;)
bucket = s3.Bucket(&#39;my-bucket&#39;)
bucket.put_object(Key=object_name, Body=data)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To download file from a S3 bucket, we could:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;s3.download_file(&#39;BUCKET_NAME&#39;, &#39;OBJECT_NAME&#39;, &#39;FILE_NAME&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;with open(&#39;FILE_NAME&#39;, &#39;wb&#39;) as f:
    s3.download_fileobj(&#39;BUCKET_NAME&#39;, &#39;OBJECT_NAME&#39;, f)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We could also set configuration when uploading, downloading, or copying a file or S3 object by:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from boto3.s3.transfer import TransferConfig
GB = 1024 ** 3
config = TransferConfig(multipart_threshold=5*GB)
config = TransferConfig(max_concurrency=5)
config = TransferConfig(use_threads=False)
s3.upload_file(&#39;FILE_NAME&#39;, &#39;BUCKET_NAME&#39;, &#39;OBJECT_NAME&#39;, Config=config)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;prerequisites-psycopg2&#34;&gt;Prerequisites: psycopg2&lt;/h2&gt;

&lt;p&gt;Psycopg2 is a popular PostgreSQL database adapter for python. We could find documentation &lt;a href=&#34;http://initd.org/psycopg/docs/&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We could easily install psycopg2 via pip:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ pip install psycopg2-binary
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To use psycopg2, we could import it, connect to an existing database and open a cursor to perform database operations:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import psycopg2
conn = psycopg2.connect(dbname=&amp;quot;DATABASE_NAME&amp;quot;, user=&amp;quot;USER&amp;quot;, host=&amp;quot;HOST&amp;quot;, port=&amp;quot;PORT&amp;quot;, password=&amp;quot;PASSWORD&amp;quot;)
cur = conn.cursor()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Query the database and fetch data in an iteration-like way:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;cur.execute(sql_query)
cur.fetchone()
cur.fetchmany(2)
cur.fetchall()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pass parameters to SQL queries:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;cur.execute(&amp;quot;&amp;quot;&amp;quot;
    INSERT INTO some_table (an_int, a_date, another_date, a_string)
    VALUES (%(int)s, %(date)s, %(date)s, %(str)s);
    &amp;quot;&amp;quot;&amp;quot;,
    {&#39;int&#39;: 10, &#39;str&#39;: &amp;quot;O&#39;Reilly&amp;quot;, &#39;date&#39;: datetime.date(2005, 11, 18)})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Make the changes to the database persistent:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;conn.commit()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Close communication with the database&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;cur.close()
conn.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;upload-data-from-s3-into-redshift&#34;&gt;Upload data from S3 into Redshift&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def main():
    connection_parameters = {
        &#39;dbname&#39;: dbname,
        &#39;user&#39;: user,
        &#39;host&#39;: host,
        &#39;port&#39;: port,
        &#39;password&#39;: password
    }
    try:
        conn = psycopg2.connect(**connection_parameters)
        print(&amp;quot;Connected to Redshift.&amp;quot;)
    except:
        print(&amp;quot;Unable to connect to Redshift.&amp;quot;)

    cur = conn.cursor()

    upload_statement = &amp;quot;
            COPY {}.{}
            FROM {}
            IAM_ROLE {}
            CSV;
            COMMIT;
    &amp;quot;.format(table_name, schema, file_name, iam_role)

    try:
        cur.execute(upload_statement)
        print(&amp;quot;Upload successfully&amp;quot;)
    except psycopg2.Error:
        raise ExecuteFailure(&amp;quot;Failed to upload the file.&amp;quot;)
    cur.close()
    conn.close()

if __name__ == &amp;quot;__main__&amp;quot;:
    main()
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;load-data-from-redshift-to-pandas&#34;&gt;Load data from Redshift to pandas&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import sqlalchemy as sa
import pandas as pd
surl = &#39;redshift+psycopg2://&#39;
engine = sa.create_engine(surl+user+&#39;:&#39;+password+&#39;@&#39;+host+&#39;:&#39;+port+&#39;/&#39;+dbname,echo=False)
df = pd.read_sql_query(&#39;SELECT * FROM table ;&#39;, engine)
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Plain text accounting tool Beancount in Emacs</title>
      <link>/post/444.html/</link>
      <pubDate>Thu, 04 Jul 2019 12:58:00 -0400</pubDate>
      <guid>/post/444.html/</guid>
      <description>&lt;p&gt;昨天搞定 Emacs 的中文环境，今天想着好久没记帐了，随手记总是很花时间，干脆一鼓作气，将记帐一起搬过来。&lt;/p&gt;

&lt;h2 id=&#34;复式记帐&#34;&gt;复式记帐&lt;/h2&gt;

&lt;p&gt;我本科时双修了一门金融，其中最为繁琐，也是最令人头疼的一门课便是会计学。我不爱听讲，毕业之后也将会计的知识点忘得查差不多了，然而其&amp;rdquo;有借必有贷，借贷必相等&amp;rdquo;的复式记帐法，反而是我生活中运用最多的。&lt;/p&gt;

&lt;p&gt;复式记帐法说起来复杂，对个人来说，就是将每笔交易分门别类，填入下面这条等式中：&lt;/p&gt;

&lt;style&gt;.org-center { margin-left: auto; margin-right: auto; text-align: center; }&lt;/style&gt;

&lt;div class=&#34;org-center&#34;&gt;
  &lt;div&gt;&lt;/div&gt;

&lt;p&gt;资产 + 费用 = 负债 + 所有者权益 + 收入&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;在个人记帐中，这条等式辅以借贷概念会令人望而生畏，所以我将其略一变形：&lt;/p&gt;

&lt;style&gt;.org-center { margin-left: auto; margin-right: auto; text-align: center; }&lt;/style&gt;

&lt;div class=&#34;org-center&#34;&gt;
  &lt;div&gt;&lt;/div&gt;

&lt;p&gt;（+资产）+（-负债）+（+费用）+（-收入）+（-所有者权益）= 0&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;资产与负债都是与金钱直接挂钩的，比如银行户头，比如人民币美钞，比如信用卡帐户，再比如借条，这些都可以算是货币的不同表示形式。&lt;/li&gt;
&lt;li&gt;费用与收入则是与金钱间接挂钩的，比如工资，比如商品，比如服务，这些都可以算是生产资本与商品资本的不同表现形式。其中收入与字面意思不同，可以理解为生产资本（劳动力等）。&lt;/li&gt;
&lt;li&gt;所有者权益对个人意义不大，一般用来记录历史盈余与糊涂帐。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;而这个变形公式中的正负号，则可以将各项目的符号关系，用作资金流向的参照。这么说有点玄乎，换个茨威格式的说法就是：&amp;rdquo;人们从命运得到的一切，冥冥之中都记下了它的价钱。&amp;rdquo;花钱买了服务，则是减少资产（花了钱），增加费用（得到服务）；工资到帐，则是增加资产（到帐），减少收入（既有劳动时间的减少）；别人跟你借了钱，则是资产减少（银行帐户或现金余额减少），负债增加（别人在你这儿的负债）。&lt;/p&gt;

&lt;p&gt;总结一下，由于人类暂时无法操控时间，所以费用一般为正，收入一般为负。而没有破产的情况下资产一般为正，别人欠你的钱为正，信用卡债（你欠别人的钱）为负。&lt;/p&gt;

&lt;h2 id=&#34;随手记帐本导出&#34;&gt;随手记帐本导出&lt;/h2&gt;

&lt;p&gt;刚来美帝我就开始用随手记，一晃也七年过去了（随手记提醒：今天是您记帐的2524天）。虽然作为强迫症的我有着非常完整的消费记录，但是这也带来了非常大的迁移成本。随手记的问题在于想要使用复式记帐时，需要通过结算中转来完成一对多的转帐操作，在聚餐或者帮别人付钱的时候比较麻烦。所以每周都需要花费大量时间来输入帐单，费时费力。&lt;/p&gt;

&lt;p&gt;首先尝试从随手记 app 导出，设置－高级功能－备份与同步－备份与恢复－本地备份与恢复－WIFI备份，得到一个 &lt;code&gt;.kbf&lt;/code&gt; 文件，将其后缀改为 &lt;code&gt;.zip&lt;/code&gt; ，解压得到一个 &lt;code&gt;.sqlite&lt;/code&gt; 文件。然而此文件经过加密，打开并不容易。&lt;/p&gt;

&lt;p&gt;不过在那个入口还看到导出 EXCEL 文件的选项，乃会员专享，恰好首月免费，我又去意已决，遂开通并获取文件。&lt;/p&gt;

&lt;h2 id=&#34;记帐方式选择&#34;&gt;记帐方式选择&lt;/h2&gt;

&lt;p&gt;有了之前的记录，就可以着手选择一款好用的记帐软件了。虽然有可以连接 postgresql 的记帐软件 gnucash，但我还是想用 Emacs 来进行记录操作。网上一搜，有一个 &lt;a href=&#34;https://plaintextaccounting.org/&#34; target=&#34;_blank&#34;&gt;Plain Text Accounting&lt;/a&gt; 网站做了详尽的整合。一路看下来，虽然 Ledger 是老前辈，可是 Beancount 的前端 Fava 效果实在好看，有这么一个轮子，为何不用呢？同时还搜到了一位中文博主 wzyboy 的三年的使用经验（&lt;a href=&#34;https://wzyboy.im/post/1063.html&#34; target=&#34;_blank&#34;&gt;Beancount &amp;mdash;&amp;mdash; 命令行复式簿记&lt;/a&gt;，&lt;a href=&#34;https://wzyboy.im/post/1317.html&#34; target=&#34;_blank&#34;&gt;使用 Beancount 记录证券投资&lt;/a&gt;），感觉非常不错，遂选定 Beancount。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ pip install beancount
$ pip install fava
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然而 pip 安装方式有两个问题，一是更新不如 source code 频繁，而是不带有 elisp code。若是自己 makefile，由于作者使用仅支持 Python 2.7 的 Mercurial 进行分布式文件管理，如何将 bitbucket 上得到的 sourse code 保持更新也是比较让人头疼的事。我只能暂时将 &lt;code&gt;.el&lt;/code&gt; 文件下载下来，以后手动进行更新，较为折腾。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(add-to-list &#39;load-path &amp;quot;/path/to/elisp/file/&amp;quot;)
  (require &#39;beancount)
  (add-to-list &#39;auto-mode-alist &#39;(&amp;quot;\\.bean\\&#39;&amp;quot; . beancount-mode))
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;帐本结构&#34;&gt;帐本结构&lt;/h2&gt;

&lt;p&gt;由于我已经通过随手记记了七年的帐，所以如果采用单一帐本的话，一方面会导致主帐本过于臃肿，另一方面也会给帐本导入增加障碍。经过考量，我的帐本结构如主帐本文件所示是这样的：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-beancount&#34;&gt;option &amp;quot;title&amp;quot; &amp;quot;我的帐本&amp;quot;
option &amp;quot;operating_currency&amp;quot; &amp;quot;USD&amp;quot; ; 这样在前端USD外的货币会共享一栏

include &amp;quot;accounts.bean&amp;quot; ; 货币相关的资产（Assets）负债（Liabilities）
include &amp;quot;items.bean&amp;quot; ; 资本相关的收入（Income）费用（Expenses）
include &amp;quot;commodities.bean&amp;quot; ; 货币
include &amp;quot;balances.bean&amp;quot; ; 对帐记录

include &amp;quot;2019.bean&amp;quot; ; 记录每年普通帐目

include &amp;quot;event/event-a.bean&amp;quot; ; 记录事件帐目（旅游为主）

include &amp;quot;points/bank-a.bean&amp;quot; ; 记录里程、积分、礼品卡、预扣款等
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;随手记帐本导入&#34;&gt;随手记帐本导入&lt;/h2&gt;

&lt;p&gt;随手记帐本导出后是一个 EXCEL 文件，含有交易种类、类别、子类、帐户 1、帐户 2、花费、人员、商家、事件、日期、详细这些列，所以我的导入思路是：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;建立两个字典 &lt;code&gt;account_dict&lt;/code&gt; 与 &lt;code&gt;item_dict&lt;/code&gt; ，分别用于转换帐户1/2与子类；&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;通过不同交易种类判断交易条目的正负号：&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;交易种类&lt;/th&gt;
&lt;th&gt;子类&lt;/th&gt;
&lt;th&gt;帐户1&lt;/th&gt;
&lt;th&gt;帐户2&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;支出&lt;/td&gt;
&lt;td&gt;+&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;收入&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;+&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;转帐&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;+&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;逐行读取 CSV 文档并转换为 beancount 记帐格式并存储于每年的文件或事件文件中，同时记录四大项目的开始时间与事件标签；&lt;/p&gt;

&lt;p&gt;如:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csv&#34;&gt;      支出,日常,Hannaford,Chase Freedom,,12.34,,Hannaford,,1/1/19,
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;则转换为:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-beancount&#34;&gt;2019-01-01 * &amp;quot;Hannaford&amp;quot; &amp;quot;支出&amp;quot;
  Expenses:Grocery:Hannaford   +12.34 USD
  Liabilities:US:Chase:Freedom -12.34 USD
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;之前使用随手记的时候，我使用&amp;rdquo;结算中转&amp;rdquo;条目来记录复杂交易。而在 beancount 中，由于复杂交易可以直接记录在一个交易事件中，这个&amp;rdquo;结算中转&amp;rdquo;其实没什么用处了。所以在导入帐本时，我将当日产生的结算事件都暂存在一个列表中，如果总额为 0，则仅记录其他类别/帐目的行为，添加 flag 并将&amp;rdquo;详细&amp;rdquo;做为注释记录在行为右边，如果不为 0,则添加 flag 并原样输出，后期再做修改。如:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csv&#34;&gt;      转账,,,Chase Freedom,结算中转,12.34,,Hannaford,,1/1/19,买菜
      转账,,,结算中转,朋友A,2.34,,Hannaford,,1/1/19,水果
      转账,,,结算中转,朋友B,5.55,,Hannaford,,1/1/19,蔬菜
      支出,日常,Hannaford,结算中转,,6.45,,Hannaford,,1/1/19,鸡蛋
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;则转换为:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-beancount&#34;&gt;2019-01-01 ! &amp;quot;Hannaford&amp;quot; &amp;quot;买菜 水果 蔬菜 鸡蛋&amp;quot;
  Liabilities:US:Chase:Freedom -12.34 USD ; 买菜
  Liabilities:Payables:A        +2.34 USD ; 水果
  Liabilities:Payables:B        +5.55 USD ; 蔬菜
  Expenses:Grocery:Hannaford    +6.45 USD ; 鸡蛋
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;生成 &lt;code&gt;accounts.bean&lt;/code&gt; 、 &lt;code&gt;items.bean&lt;/code&gt; 、 &lt;code&gt;balances.bean&lt;/code&gt; 与主帐本 &lt;code&gt;main.bean&lt;/code&gt; ；&lt;/p&gt;

&lt;p&gt;&lt;code&gt;balances.bean&lt;/code&gt; 比较特殊，用于核对帐目。可以通过银行对帐单自动生成，但是由于我 17 年后的对帐单都没下载到本地来，所以直接在下载的同时手动输入数额了。由于 balance 仅核算当日以前的交易，所以有时需要修改 balance 日期来避免错误提示。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-beancount&#34;&gt;2019-01-11 balance Liabilities:US:Chase:Freedom -123.45 USD
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;对于现金来说由于比较零散，也不一定留有小票，所以我会用 pad 补齐：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-beancount&#34;&gt;2019-01-31 pad Assets:US:Cash Expenses:Grocery:Other
2019-02-01 balance Assets:US:Cash +50 USD
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;对于货币种类进行核算。&lt;/p&gt;

&lt;p&gt;随手记导出的文件有个问题是不会记录货币种类，所以需要后期对涉及多货币的交易进行核对与修改，比如我帮国内的朋友 c 买了东西，对方还我人民币的话，可以记成：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-beancount&#34;&gt;2019-01-01 * &amp;quot;&amp;quot; &amp;quot;C还钱&amp;quot;
  Assets:CN:Cash  +68 CNY
  Liabilities:Payables:C -10 USD @@ 68 CNY
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;查看报表&#34;&gt;查看报表&lt;/h2&gt;

&lt;p&gt;Beancount 自带 &lt;code&gt;bean-web main.bean&lt;/code&gt; 语句，可以在 &lt;a href=&#34;http://localhost:8080/&#34; target=&#34;_blank&#34;&gt;http://localhost:8080/&lt;/a&gt; 查看简单报表。 不过装了 fava 的我，便可以欢乐地使用 &lt;code&gt;fava main.bean&lt;/code&gt; 语句，在 &lt;a href=&#34;http://localhost:5000/&#34; target=&#34;_blank&#34;&gt;http://localhost:5000/&lt;/a&gt; 查看比较华丽的报表。&lt;a href=&#34;https://fava.pythonanywhere.com/example-beancount-file/trial%5Fbalance/&#34; target=&#34;_blank&#34;&gt;这里&lt;/a&gt; 有官方演示，效果拔群。&lt;/p&gt;

&lt;h2 id=&#34;快捷记账&#34;&gt;快捷记账&lt;/h2&gt;

&lt;p&gt;我写了一个简单的 &lt;code&gt;org-capture-templates&lt;/code&gt; ，这样就可以通过 &lt;kbd&gt;C-c c-b&lt;/kbd&gt; 来进行快捷记账。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(setq org-capture-templates
      &#39; ((&amp;quot;b&amp;quot; &amp;quot;Beancount&amp;quot; plain
          (file &amp;quot;~/Dropbox/Beancount/2019.bean&amp;quot;)
          &amp;quot;
%(org-read-date) %^{标识|*|!} \&amp;quot;%^{商户}\&amp;quot; \&amp;quot;%^{描述}\&amp;quot;
  %^{借记||Expenses:Grocery:Hannaford|Expenses:Grocery:Other|Expenses:Restaurant|Income:Paycheck|Assets:US:Cash|Assets:CN:Cash|Liabilities:Payables:A|Liabilities:Payables:B|Liabilities:Payables:C|Liabilities:US:Chase:Freedom}  +%^{金额} USD
  %^{贷记||Expenses:Grocery:Hannaford|Expenses:Grocery:Other|Expenses:Restaurant|Income:Paycheck|Assets:US:Cash|Assets:CN:Cash|Liabilities:Payables:A|Liabilities:Payables:B|Liabilities:Payables:C|Liabilities:US:Chase:Freedom}  -%^{金额} USD&amp;quot;)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;不过在这个模板中，帐户名称需要自定义，比较麻烦，不能通用。未来我会尝试写一个 lisp function 来优化，希望能够实现：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;记帐不限条目，可记录多项事件于同一笔交易中；&lt;/li&gt;
&lt;li&gt;自动读取 &lt;code&gt;accounts.bean&lt;/code&gt; 与 &lt;code&gt;items.bean&lt;/code&gt; 文件中的项目并作为备选；&lt;/li&gt;
&lt;li&gt;自动对齐金额。&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>CSV2Bean</title>
      <link>/project/csv2bean/</link>
      <pubDate>Fri, 15 Mar 2019 13:44:00 -0400</pubDate>
      <guid>/project/csv2bean/</guid>
      <description>&lt;p&gt;• Provide smooth transition from accounting app to plain text accounting tools.&lt;/p&gt;

&lt;p&gt;• Convert &lt;code&gt;.csv&lt;/code&gt; file exported from Sui accounting app to a Beancount text ledger.&lt;/p&gt;

&lt;p&gt;• Feature a &lt;code&gt;lisp&lt;/code&gt; function to quickly add transactions into Beancount using Emacs.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Gene Variation Analysis of Stomach Cancer</title>
      <link>/project/gistic/</link>
      <pubDate>Fri, 15 Mar 2019 13:44:00 -0400</pubDate>
      <guid>/project/gistic/</guid>
      <description>&lt;p&gt;• Extracted cancer research data from the Cancer Genome Atlas Network &amp;reg;.&lt;/p&gt;

&lt;p&gt;• Applied GISTIC clustering analysis to patient-indexed tables to identify molecular subgroups (Bioinformatics).&lt;/p&gt;

&lt;p&gt;• Mapped gene list with biological annotations with functional annotation tool DAVID (Python).&lt;/p&gt;

&lt;p&gt;• Summarized and visualized stomach cancer-related gene candidates with R package MAFtools &amp;reg;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Multithread Web Crawler</title>
      <link>/project/multicrawler/</link>
      <pubDate>Fri, 15 Mar 2019 13:44:00 -0400</pubDate>
      <guid>/project/multicrawler/</guid>
      <description>&lt;p&gt;• Write a class to handle multithreading website crawling inside the given domain.&lt;/p&gt;

&lt;p&gt;• Feature a breath-first search algorithm and a multithread pool to visit all urls asynchronously.&lt;/p&gt;

&lt;p&gt;• Handle various status code, time-out and exceptions in a structured manner.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>RxMiner</title>
      <link>/project/rxminer/</link>
      <pubDate>Fri, 15 Mar 2019 13:44:00 -0400</pubDate>
      <guid>/project/rxminer/</guid>
      <description>

&lt;p&gt;• Developed an ETL pipeline to extract, integrate and transform prescription data from multiple providers in AWS cloud computing to enable nation-wide queries on prescription drug usage (Python, AWS, Airflow).&lt;/p&gt;

&lt;p&gt;• Validated and combined public available Medicaid and Medicare datasets with NIH, FDA and NPPES sources into a SQL queryable databases in Redshift, visualized in website (Redshift, Tableau, JavaScript, CSS).&lt;/p&gt;

&lt;p&gt;• Implemented custom connector to Redshift/PostgreSQL with 20 times more efficiency (Python).&lt;/p&gt;

&lt;h2 id=&#34;rxminer&#34;&gt;RxMiner&lt;/h2&gt;

&lt;p&gt;RxMiner is a scalable data pipeline for prescription drug analytics that standardizes Medicaid and Medicare prescriptions using NIH drug, FDA drug, and NEPPS provider information.&lt;/p&gt;

&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;

&lt;p&gt;With a switch to electronic prescriptions, healthcare and insurance companies are providing large drug usage datasets. However, since each provider has their own way to log prescriptions the data sets are non-standard. Using publicly available drug datasets, RxMiner standardizes and joins prescription datasets.&lt;/p&gt;

&lt;p&gt;RxMiner features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;100 million standardized prescriptions queryable in Redshift&lt;/li&gt;
&lt;li&gt;Automated ingestion of Medicaid, Medicare, NIH, FDA and NEPPS data&lt;/li&gt;
&lt;li&gt;Validation of prescriptions against NIH, FDA and NEPPS&lt;/li&gt;
&lt;li&gt;Union of prescription from Medicaid and Medicare&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;RxMiner is scalable and built on Amazon S3, EC2, and Redshift on AWS. Tableau can be used to visualize and analyze the standardized dataset or each data source.&lt;/p&gt;














&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://github.com/ziyunch/RxMiner/raw/master/docs/pipeline.png&#34; &gt;
&lt;img src=&#34;https://github.com/ziyunch/RxMiner/raw/master/docs/pipeline.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;



&lt;/figure&gt;


&lt;h2 id=&#34;requirments&#34;&gt;Requirments&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Python 3.7&lt;/li&gt;
&lt;li&gt;Amazon AWS Account&lt;/li&gt;
&lt;li&gt;SODA API&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;

&lt;p&gt;Clone the RxMiner project to your local computer or `m4.4xlarge` EC2 instance and install awscli and other requirements.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/ziyunch/RxMiner.git
pip install awscli
pip install ./requirements.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next add the following credentials as environment variables to your &lt;code&gt;~/.bash_profile&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# AWS Credentials
export AWS_BUCKET_NAME=XXXX
export AWS_ACCESS_KEY_ID=XXXX
export AWS_SECRET_ACCESS_KEY=XXXX
# SODA API
export SODAPY_APPTOKEN=XXXX
# Redshift configuration
export REDSHIFT_USER=XXXX
export REDSHIFT_PASSWORD=XXXX
export REDSHIFT_HOST_IP=XXXX
export REDSHIFT_PORT=XXXX
export REDSHIFT_DATABASE=XXXX
# PostgreSQL configuration
export POSTGRESQL_USER=XXXX
export POSTGRESQL_PASSWORD=XXXX
export POSTGRESQL_HOST_IP=XXXX
export POSTGRESQL_PORT=XXXX
export POSTGRESQL_DATABASE=XXXX
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Source the &lt;code&gt;.bash_profile&lt;/code&gt; when finished.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;source ~/.bash_profile
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then import data into S3 bucket.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;. ./deployment/import.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ingest data and stage them in SQL database.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;. ./deployment/ingest.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Prepare sample table based on queries.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;. ./deployment/sql.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;getting-started&#34;&gt;Getting Started&lt;/h2&gt;

&lt;p&gt;Open the website at &lt;a href=&#34;http://rxminer.net&#34; target=&#34;_blank&#34;&gt;http://rxminer.net&lt;/a&gt;. Four graphs are shown in the interactive dashboard. On the top is the market size of all or chosen drugs over the states. Bottom left shows the Top 10 categories of drugs shared most markets for the whole nation or chosen state. Bottom middle shows the market of each drug in the descending order. Bottom right shows the drug usage for each year.&lt;/p&gt;

&lt;p&gt;The sample visualization of national drug usage during 2013-2016 was also published on &lt;a href=&#34;https://public.tableau.com/profile/runhan.yu#!/vizhome/rxminer2/Dashboard1&#34; target=&#34;_blank&#34;&gt;Tableau public server&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The standardized dataset or each data source could be connected by &lt;code&gt;Tableau Desktop 2018.3&lt;/code&gt; or other data analysis or visualization tools.&lt;/p&gt;

&lt;h2 id=&#34;credits&#34;&gt;Credits&lt;/h2&gt;

&lt;p&gt;RxMiner was built as a project at Insight Data Engineering in the Winter 2019 session by Runhan Yu. It is availble as open source and is free to use and modify by anyone.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
