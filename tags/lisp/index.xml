<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>lisp | RUNHAN YU</title>
    <link>/tags/lisp/</link>
      <atom:link href="/tags/lisp/index.xml" rel="self" type="application/rss+xml" />
    <description>lisp</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Wed, 04 Sep 2019 20:06:00 -0400</lastBuildDate>
    <image>
      <url>/img/icon-192.png</url>
      <title>lisp</title>
      <link>/tags/lisp/</link>
    </image>
    
    <item>
      <title>Add structure template in Org-mode</title>
      <link>/post/450.html/</link>
      <pubDate>Wed, 04 Sep 2019 20:06:00 -0400</pubDate>
      <guid>/post/450.html/</guid>
      <description>&lt;p&gt;The org-mode code blocks can be used for literate programming and creating executable snippets. There is also a quick way to insert some common code blocks, for example, &lt;code&gt;&amp;lt;s&lt;/code&gt; &lt;kbd&gt;TAB&lt;/kbd&gt; would expand as&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-org&#34;&gt;#+BEGIN_SRC

#+END_SRC
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Thus, it is pretty convenient to insert code blocks or examples.&lt;/p&gt;

&lt;p&gt;在 &lt;code&gt;org-structure-template-alist&lt;/code&gt; 这个列表中预置了许多常用结构，如&lt;a href=&#34;https://orgmode.org/manual/Structure-Templates.html&#34; target=&#34;_blank&#34;&gt;官方文档&lt;/a&gt;所示:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Key&lt;/th&gt;
&lt;th&gt;Structure Template&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;a&lt;/td&gt;
&lt;td&gt;‘#+BEGIN_EXPORT ascii’ … ‘#+END_EXPORT’&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;c&lt;/td&gt;
&lt;td&gt;‘#+BEGIN_CENTER’ … ‘#+END_CENTER’&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;C&lt;/td&gt;
&lt;td&gt;‘#+BEGIN_COMMENT’ … ‘#+END_COMMENT’&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;e&lt;/td&gt;
&lt;td&gt;‘#+BEGIN_EXAMPLE’ … ‘#+END_EXAMPLE’&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;E&lt;/td&gt;
&lt;td&gt;‘#+BEGIN_EXPORT’ … ‘#+END_EXPORT’&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;h&lt;/td&gt;
&lt;td&gt;‘#+BEGIN_EXPORT html’ … ‘#+END_EXPORT’&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;l&lt;/td&gt;
&lt;td&gt;‘#+BEGIN_EXPORT latex’ … ‘#+END_EXPORT’&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;q&lt;/td&gt;
&lt;td&gt;‘#+BEGIN_QUOTE’ … ‘#+END_QUOTE’&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;s&lt;/td&gt;
&lt;td&gt;‘#+BEGIN_SRC’ … ‘#+END_SRC’&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;v&lt;/td&gt;
&lt;td&gt;‘#+BEGIN_VERSE’ … ‘#+END_VERSE’&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;不过有时也会想要自己造个轮子，比如我平时写博客，有时需要插入按键标签 &lt;code&gt;&amp;lt;kbd&amp;gt;&lt;/code&gt; 。此时可用 lisp 的 &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html%5Fnode/elisp/List-Variables.html&#34; target=&#34;_blank&#34;&gt;add-to-list 语法&lt;/a&gt;来添加新的结构模板：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;add-to-list symbol element &amp;amp;optional append compare-fn
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;即&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(add-to-list &#39;org-structure-template-alist
             &#39;(&amp;quot;k&amp;quot; &amp;quot;@@html:&amp;lt;kbd&amp;gt;@@?@@html:&amp;lt;/kbd&amp;gt;@@&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个语法的优点在于它会对比原列表内的元素以避免添加重复元素。&lt;/p&gt;

&lt;p&gt;这个 &lt;code&gt;add-to-list&lt;/code&gt; 语法每次只能添加一个元素进入列表，并不能添加多个元素。而简单执行 &lt;a href=&#34;http://clhs.lisp.se/Body/f%5Fappend.htm&#34; target=&#34;_blank&#34;&gt;append&lt;/a&gt; ，则无法避免重复元素的添加。所以我采用 &lt;a href=&#34;http://clhs.lisp.se/Body/m%5Fdolist.htm&#34; target=&#34;_blank&#34;&gt;dolist&lt;/a&gt; 指令来添加多个元素：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(dolist
    (my-org-structure-template
     &#39;((&amp;quot;k&amp;quot; &amp;quot;@@html:&amp;lt;kbd&amp;gt;@@?@@html:&amp;lt;/kbd&amp;gt;@@&amp;quot;)
       (&amp;quot;spy&amp;quot; &amp;quot;#+BEGIN_SRC python\n?\n#+END_SRC&amp;quot;)
       (&amp;quot;son&amp;quot; &amp;quot;#+BEGIN_SRC org :eval never-export\n,?\n#+END_SRC&amp;quot;)))
  (add-to-list &#39;org-structure-template-alist my-org-structure-template))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果拔群。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Emacs configuration with support for Chinese input</title>
      <link>/post/443.html/</link>
      <pubDate>Wed, 03 Jul 2019 13:44:00 -0400</pubDate>
      <guid>/post/443.html/</guid>
      <description>&lt;p&gt;使用 Emacs 三年多了，当时受了 &lt;a href=&#34;https://github.com/redguardtoo/mastering-emacs-in-one-year-guide&#34; target=&#34;_blank&#34;&gt;一年成为 Emacs 高手&lt;/a&gt; 的蛊惑，且贪图便利，使用了 &lt;a href=&#34;https://github.com/purcell/emacs.d&#34; target=&#34;_blank&#34;&gt;Purcell 的配置&lt;/a&gt;。正如 Purcell 所说，此配置相当 reasonable，用来入门确实让我受益匪浅，少走了很多弯路。三年使用下来，我需要添加的插件只有 &lt;code&gt;org-ref&lt;/code&gt; 和 &lt;code&gt;ob-smiles&lt;/code&gt; ，配置更新也仅须 &lt;code&gt;git pull&lt;/code&gt; 外加 &lt;kbd&gt;M-x package-list-packages U x&lt;/kbd&gt; 即可，非常方便。&lt;/p&gt;

&lt;p&gt;然而过去三年来，我主要是使用 Emacs 中的 org-mode 来记 Science 与 Tech 方面笔记，基于 Latex 的长文章 / 代码我更喜欢用 Atoms + Vim-mode 来写，基于 Markdown 的博客则用 MWeb 来写，中文笔记喜欢使用 Bears，最后却还是回到了苹果自带的免费 Notes。其他零零碎碎的场景则使用更为零碎的 app，餐馆用 DayGram + Workflowy，记账用随手记。非常不统一。&lt;/p&gt;

&lt;p&gt;也就是说，我并不是一个“running my life with Emacs”的重症者，Purcell 配置的 Emacs 中也有大量我用不到，或者需要使用却不甚了解的插件。所以失业在家这个契机恰好也是让我重新审视 Emacs，看看我能否最大化地使用 Emacs。&lt;/p&gt;

&lt;p&gt;对我而言，使用 Atoms 来写代码与 Latex，是由于我对使用 Emacs 调试还不甚熟练。所以这几天我花了一点时间重新阅读了 Emacs 手册。&lt;/p&gt;

&lt;p&gt;使用 MWeb 来写博客与使用 Notes 来记笔记的原因则比较可笑，因为我基本上都是使用英文记录 Science &amp;amp; Tech 方面的笔记，我并没有配置 Emacs 的中文环境。所以需要使用中文来写东西时，我自然就得换用其他工具。这段时间准备面试，将 org-mode 的使用范围扩大到记录面试适宜，由于一亩三分地是一个主要资料来源，不免需要粘贴许多中文帖子进来。这时再将 Emacs 视为一个纯英文环境未免有些麻烦。而将 Emacs 中文化了，自然也不需要 MWeb 和 Notes 或者 Bear 什么事了。&lt;/p&gt;

&lt;p&gt;而记录餐馆和消费的需求比较麻烦，本文暂且搁置，今后有空再来研究。&lt;/p&gt;

&lt;h2 id=&#34;emacs-中文输入法&#34;&gt;Emacs 中文输入法&lt;/h2&gt;

&lt;p&gt;Emacs 窗口左下角显示的是 character set 与 editing state，其中 character set 默认值为 U，即没有 input-mode 且使用 unicode 的 coding system，通过 &lt;kbd&gt;C-\&lt;/kbd&gt; ，可以非常方便地设置输入法并进行切换。&lt;/p&gt;

&lt;p&gt;Emacs 有一些自带的中文输入法，比如拼音（chinese-py）、自然码（chinese-ziranma），还有一些四声（chinese-sisheng）、英汉（chinese-ecdict）等输入法。我将简体编码的一些输入法列于下表，详见 &lt;code&gt;leim-lisp.el&lt;/code&gt; （可通过 &lt;kbd&gt;M-x find-library&lt;/kbd&gt; 迅速查看）。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;input mode&lt;/th&gt;
&lt;th&gt;输入法&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;chinese-ccdospy&lt;/td&gt;
&lt;td&gt;缩写拼音&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;chinese-ctlau&lt;/td&gt;
&lt;td&gt;刘锡祥式粤音&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;chinese-punct&lt;/td&gt;
&lt;td&gt;标点符号&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;chinese-py&lt;/td&gt;
&lt;td&gt;拼音&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;chinese-qj&lt;/td&gt;
&lt;td&gt;全角&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;chinese-sw&lt;/td&gt;
&lt;td&gt;首尾&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;chinese-tonepy&lt;/td&gt;
&lt;td&gt;带调拼音&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;chinese-ziranma&lt;/td&gt;
&lt;td&gt;自然码&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;由于我习惯用微软双拼，故另外安装 &lt;a href=&#34;https://github.com/tumashu/pyim&#34; target=&#34;_blank&#34;&gt;pyim&lt;/a&gt;，配置如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(require &#39;pyim)
(require &#39;pyim-basedict)
(pyim-basedict-enable)
(setq default-input-method &amp;quot;pyim&amp;quot;)
(setq pyim-default-scheme &#39;microsoft-shuangpin)
(setq pyim-page-tooltip &#39;popup)
(setq pyim-page-length 5)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;emacs-中文字体&#34;&gt;Emacs 中文字体&lt;/h2&gt;

&lt;p&gt;Emacs 中默认的中文字体是 Arial Unicode MS，看着总觉得哪哪不顺眼，所以下一步就是更换个顺眼的中文字体。&lt;/p&gt;

&lt;p&gt;此处我先参考了 &lt;a href=&#34;http://zhuoqiang.me/torture-emacs.html&#34; target=&#34;_blank&#34;&gt;zhuoqiang 的做法&lt;/a&gt;，将中英文字体设为等宽的：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;;; Setting English Font
(set-face-attribute &#39;default nil :font &amp;quot;DejaVu Sans Mono 14&amp;quot;)

;; Chinese Font
(dolist (charset &#39;(kana han symbol cjk-misc bopomofo))
  (set-fontset-font (frame-parameter nil &#39;font)
                    charset (font-spec :family &amp;quot;PingFang SC&amp;quot;
                                       :size 16)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;并将他写的更为通用的设置字体的函数：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(defun qiang-set-font (english-fonts
                       english-font-size
                       chinese-fonts
                       &amp;amp;optional chinese-font-size))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;略加修改为：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(defun qiang-set-font (english-fonts
                       english-font-size
                       chinese-fonts
                       &amp;amp;optional chinese-font-scale)
    ...
    :size (* chinese-font-scale english-font-size))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然而当我用 &lt;kbd&gt;C-x C-+&lt;/kbd&gt; 动态调整字体大小时，发现只有英文字体会缩放，中文则仍然蠢蠢地处于初始大小。查手册得可通过 &lt;code&gt;face-font-rescale-alist&lt;/code&gt; 来设定特定字体缩放值。简单来说就是这样：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(setq face-font-rescale-alist &#39;((&amp;quot;PingFang SC&amp;quot; . chinese-font-scale))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;但是这样只能对苹方字体起效，如果一个一个对 font-list 中的字体修改 scale-factor 看起来又不简洁。于是我想到两种较为简便的设定方式：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;;; First method
(setq face-font-rescale-alist
      (loop for x in zh-font-list
            collect (cons x chinese-font-scale)))
;; Second method
(setq face-font-rescale-alist
      (pairlis zh-font-list
               (make-list (list-length zh-font-list)
                           chinese-font-scale)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果拔群。&lt;/p&gt;

&lt;p&gt;详细配置如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(defun qiang-font-existsp (font)
  (if (null (x-list-fonts font))
      nil
    t))

(defvar zh-font-list &#39;(&amp;quot;PingFang SC&amp;quot; &amp;quot;Hiragino Sans GB&amp;quot; &amp;quot;Microsoft Yahei&amp;quot; &amp;quot;Source Han Sans Normal&amp;quot; &amp;quot;STHeiti&amp;quot; &amp;quot;黑体&amp;quot; &amp;quot;新宋体&amp;quot; &amp;quot;宋体&amp;quot;))
(defvar en-font-list &#39;(&amp;quot;DejaVu Sans Mono&amp;quot; &amp;quot;Monaco&amp;quot; &amp;quot;Consolas&amp;quot; &amp;quot;Monospace&amp;quot; &amp;quot;Courier New&amp;quot;))

(defun qiang-make-font-string (font-name font-size)
  (if (and (stringp font-size)
           (equal &amp;quot;:&amp;quot; (string (elt font-size 0))))
      (format &amp;quot;%s%s&amp;quot; font-name font-size)
    (format &amp;quot;%s %s&amp;quot; font-name font-size)))

(defun qiang-set-font (english-fonts
                       english-font-size
                       chinese-fonts
                       &amp;amp;optional chinese-font-scale)

  (setq chinese-font-scale (or chinese-font-scale 1.2))

  (setq face-font-rescale-alist
        (loop for x in zh-font-list
              collect (cons x chinese-font-scale)))

  &amp;quot;english-font-size could be set to \&amp;quot;:pixelsize=18\&amp;quot; or a integer.
If set/leave chinese-font-scale to nil, it will follow english-font-size&amp;quot;

  (require &#39;cl)                         ; for find if
  (let ((en-font (qiang-make-font-string
                  (find-if #&#39;qiang-font-existsp english-fonts)
                  english-font-size))
        (zh-font (font-spec :family (find-if #&#39;qiang-font-existsp chinese-fonts))))

    ;; Set the default English font
    (message &amp;quot;Set English Font to %s&amp;quot; en-font)
    (set-face-attribute &#39;default nil :font en-font)

    ;; Set Chinese font
    ;; Do not use &#39;unicode charset, it will cause the English font setting invalid
    (message &amp;quot;Set Chinese Font to %s&amp;quot; zh-font)
    (dolist (charset &#39;(kana han symbol cjk-misc bopomofo))
      (set-fontset-font (frame-parameter nil &#39;font)
                        charset zh-font))))

(qiang-set-font en-font-list 14 zh-font-list)
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>CSV2Bean</title>
      <link>/project/csv2bean/</link>
      <pubDate>Fri, 15 Mar 2019 13:44:00 -0400</pubDate>
      <guid>/project/csv2bean/</guid>
      <description>&lt;p&gt;• Provide smooth transition from accounting app to plain text accounting tools.&lt;/p&gt;

&lt;p&gt;• Convert &lt;code&gt;.csv&lt;/code&gt; file exported from Sui accounting app to a Beancount text ledger.&lt;/p&gt;

&lt;p&gt;• Feature a &lt;code&gt;lisp&lt;/code&gt; function to quickly add transactions into Beancount using Emacs.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
